import{_ as n,c as a,o as s,a as o}from"./app.09993eb5.js";const h='{"title":"Using C++ Wrapper","description":"","frontmatter":{},"headers":[],"relativePath":"guide/using-cpp.md","lastUpdated":1658387680000}',t={},p=o(`<h1 id="using-c-wrapper" tabindex="-1">Using C++ Wrapper <a class="header-anchor" href="#using-c-wrapper" aria-hidden="true">#</a></h1><p>Alternatively, you can also use <a href="https://github.com/nodejs/node-addon-api" target="_blank" rel="noopener noreferrer">node-addon-api</a> which is official Node-API header-only C++ wrapper, already shipped (v5.0.0) in <code>emnapi</code> but without Node.js specific API such as <code>AsyncContext</code>, <code>Function::MakeCallback</code>, etc.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>C++ wrapper can only be used to target Node.js v14.6.0+ and modern browsers those support <code>FinalizationRegistry</code> and <code>WeakRef</code> (<a href="https://v8.dev/blog/v8-release-84" target="_blank" rel="noopener noreferrer">v8 engine v8.4+</a>)!</p></div><p>Create <code>hello.cpp</code>.</p><div class="language-cpp"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;napi.h&gt;</span></span>

Napi<span class="token double-colon punctuation">::</span>String <span class="token function">JsHello</span><span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>CallbackInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Napi<span class="token double-colon punctuation">::</span>Object <span class="token function">Init</span><span class="token punctuation">(</span>Napi<span class="token double-colon punctuation">::</span>Env env<span class="token punctuation">,</span> Napi<span class="token double-colon punctuation">::</span>Object exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  exports<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>Napi<span class="token double-colon punctuation">::</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              Napi<span class="token double-colon punctuation">::</span><span class="token class-name">Function</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> JsHello<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">NODE_API_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Init<span class="token punctuation">)</span>
</code></pre></div><p>Compile <code>hello.cpp</code> using <code>em++</code>. C++ exception is disabled by Emscripten default, so predefine <code>-DNAPI_DISABLE_CPP_EXCEPTIONS</code> and <code>-DNODE_ADDON_API_ENABLE_MAYBE</code> here. If you would like to enable C++ exception, use <code>-sDISABLE_EXCEPTION_CATCHING=0</code> instead and remove <code>.Check()</code> call. See official documentation <a href="https://github.com/nodejs/node-addon-api/blob/main/doc/error_handling.md" target="_blank" rel="noopener noreferrer">here</a>.</p><div class="language-bash"><pre><code>em++ -O3 <span class="token punctuation">\\</span>
     -DNAPI_DISABLE_CPP_EXCEPTIONS <span class="token punctuation">\\</span>
     -DNODE_ADDON_API_ENABLE_MAYBE <span class="token punctuation">\\</span>
     -I./node_modules/@tybys/emnapi/include <span class="token punctuation">\\</span>
     --js-library<span class="token operator">=</span>./node_modules/@tybys/emnapi/dist/library_napi.js <span class="token punctuation">\\</span>
     -sEXPORTED_FUNCTIONS<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;_malloc&#39;</span>,<span class="token string">&#39;_free&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">\\</span>
     -o hello.js <span class="token punctuation">\\</span>
     ./node_modules/@tybys/emnapi/src/emnapi.c <span class="token punctuation">\\</span>
     hello.cpp
</code></pre></div>`,7),e=[p];function c(l,u,i,r,d,k){return s(),a("div",null,e)}var b=n(t,[["render",c]]);export{h as __pageData,b as default};
