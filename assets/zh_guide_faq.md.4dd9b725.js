import{_ as e,o as a,c as i,a as d}from"./app.5447bf4b.js";const f=JSON.parse('{"title":"常见问题","description":"","frontmatter":{},"headers":[{"level":2,"title":"emnapi 和原生 Node-API 有什么区别","slug":"emnapi-和原生-node-api-有什么区别","link":"#emnapi-和原生-node-api-有什么区别","children":[]},{"level":2,"title":"我什么时候应该用 emnapi","slug":"我什么时候应该用-emnapi","link":"#我什么时候应该用-emnapi","children":[]},{"level":2,"title":"如何移植现成的用 Node-API 编写 Node.js 扩展","slug":"如何移植现成的用-node-api-编写-node-js-扩展","link":"#如何移植现成的用-node-api-编写-node-js-扩展","children":[]}],"relativePath":"zh/guide/faq.md","lastUpdated":1680100677000}'),o={name:"zh/guide/faq.md"},n=d('<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-hidden="true">#</a></h1><h2 id="emnapi-和原生-node-api-有什么区别" tabindex="-1"><code>emnapi</code> 和原生 Node-API 有什么区别 <a class="header-anchor" href="#emnapi-和原生-node-api-有什么区别" aria-hidden="true">#</a></h2><ul><li><p><code>emnapi</code> 的大部分 API 是由 JavaScript 实现的，而原生 Node-API 是由 Node.js C++ 代码实现的，并且可以完全访问 V8 引擎。</p></li><li><p><code>emnapi</code> 由 Emscripten 编译成 WebAssembly，而原生 Node-API 被编译成 Node.js 扩展（<code>.node</code> 是操作系统动态链接库），可以使用操作系统 API。</p></li><li><p><code>emnapi</code> 没有 Node.js 特定的 API，一些 API 依赖于宿主 JavaScript 环境，请参阅 <a href="/emnapi-docs/zh/reference/list.html">API 列表</a></p></li><li><p>如果运行时支持 <code>FinalizationRegistry</code> 和 <code>WeakRef</code>，则使用 <code>emnapi</code> 时可以直接使用内置的 <code>node-addon-api</code>。</p></li></ul><h2 id="我什么时候应该用-emnapi" tabindex="-1">我什么时候应该用 <code>emnapi</code> <a class="header-anchor" href="#我什么时候应该用-emnapi" aria-hidden="true">#</a></h2><ul><li>你更喜欢 Node-API，并且相比于 <code>embind</code> 你更熟悉 Node-API。</li><li>你希望将你的（或现成的）用 Node-API 编写的 Node.js 扩展移植到 WebAssembly。</li></ul><h2 id="如何移植现成的用-node-api-编写-node-js-扩展" tabindex="-1">如何移植现成的用 Node-API 编写 Node.js 扩展 <a class="header-anchor" href="#如何移植现成的用-node-api-编写-node-js-扩展" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>移植重度使用操作系统 API（尤其是大量使用 <code>Windows.h</code>）的原生扩展是非常困难的。</p><p>如果运行时不支持 <code>FinalizationRegistry</code> 和 <code>WeakRef</code>则<strong>不能</strong>使用 node-addon-api。</p></div><ol><li>检查扩展中使用的所有 API 是否在 <code>emnapi</code> 中已被实现。请参阅 <a href="/emnapi-docs/zh/reference/list.html">API 列表</a>。</li><li>在调用 <code>napi_create_reference</code> / <code>napi_wrap</code> 之前使用 <a href="/emnapi-docs/zh/reference/additional.html#emnapi-is-support-weakref">emnapi_is_support_weakref</a> 检查运行时的弱引用支持。</li><li>检查是否需要同步 wasm 内存，根据 <a href="/emnapi-docs/zh/reference/list.html#arraybuffer-相关">ArrayBuffer 相关的 API</a></li><li>编写 CMakeLists。不支持 node-gyp。</li></ol>',8),c=[n];function r(l,s,t,p,h,m){return a(),i("div",null,c)}const A=e(o,[["render",r]]);export{f as __pageData,A as default};
