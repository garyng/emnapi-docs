import{_ as e,o as a,c as s,a as n}from"./app.58384371.js";const h=JSON.parse('{"title":"API List","description":"","frontmatter":{"sidebarDepth":4},"headers":[{"level":2,"title":"Unavailable","slug":"unavailable","link":"#unavailable","children":[]},{"level":2,"title":"Limited","slug":"limited","link":"#limited","children":[{"level":3,"title":"Reference related","slug":"reference-related","link":"#reference-related","children":[]},{"level":3,"title":"BigInt related","slug":"bigint-related","link":"#bigint-related","children":[]},{"level":3,"title":"ArrayBuffer related","slug":"arraybuffer-related","link":"#arraybuffer-related","children":[]},{"level":3,"title":"Buffer related","slug":"buffer-related","link":"#buffer-related","children":[]},{"level":3,"title":"Cleanup hook related","slug":"cleanup-hook-related","link":"#cleanup-hook-related","children":[]},{"level":3,"title":"Memory management","slug":"memory-management","link":"#memory-management","children":[]},{"level":3,"title":"Asynchronous operation on Node.js","slug":"asynchronous-operation-on-node-js","link":"#asynchronous-operation-on-node-js","children":[]},{"level":3,"title":"Multithread related","slug":"multithread-related","link":"#multithread-related","children":[]},{"level":3,"title":"Other API","slug":"other-api","link":"#other-api","children":[]}]},{"level":2,"title":"Available Anytime","slug":"available-anytime","link":"#available-anytime","children":[]}],"relativePath":"reference/list.md","lastUpdated":1676357086000}'),l={name:"reference/list.md"},o=n(`<h1 id="api-list" tabindex="-1">API List <a class="header-anchor" href="#api-list" aria-hidden="true">#</a></h1><h2 id="unavailable" tabindex="-1">Unavailable <a class="header-anchor" href="#unavailable" aria-hidden="true">#</a></h2><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>These APIs are unavailable, throws JavaScript Error.</p></div><h4 id="node-api-h" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h" aria-hidden="true">#</a></h4><ul><li><s>napi_open_callback_scope</s></li><li><s>napi_close_callback_scope</s></li></ul><h2 id="limited" tabindex="-1">Limited <a class="header-anchor" href="#limited" aria-hidden="true">#</a></h2><h3 id="reference-related" tabindex="-1">Reference related <a class="header-anchor" href="#reference-related" aria-hidden="true">#</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Only <code>Object</code> and <code>Function</code> can be referenced, <code>Symbol</code> is not support.</p><p>If the runtime does not support <a href="https://www.caniuse.com/?search=FinalizationRegistry" target="_blank" rel="noreferrer">FinalizationRegistry</a> and <a href="https://www.caniuse.com/?search=WeakRef" target="_blank" rel="noreferrer">WeakRef</a>, The following APIs have some limitations, and all references are strong references no matter their reference count is 0 or not.</p></div><h4 id="js-native-api-h" tabindex="-1">js_native_api.h <a class="header-anchor" href="#js-native-api-h" aria-hidden="true">#</a></h4><ul><li><em><strong>napi_wrap</strong></em>: <code>finalize_cb</code> and <code>result</code> must be <code>NULL</code>, user must call <code>napi_remove_wrap</code> later</li><li><em><strong>napi_create_external</strong></em>: <code>finalize_cb</code> must be <code>NULL</code></li><li><em><strong>napi_create_reference</strong></em>: Create strong reference even if <code>0</code> is passed to <code>initial_refcount</code></li><li><em><strong>napi_reference_unref</strong></em>: The reference is still a strong reference even the count is <code>0</code></li><li><em><strong>napi_add_finalizer</strong></em>: Unavailable, always throws error</li></ul><h3 id="bigint-related" tabindex="-1">BigInt related <a class="header-anchor" href="#bigint-related" aria-hidden="true">#</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>These APIs require <a href="https://www.caniuse.com/?search=BigInt" target="_blank" rel="noreferrer">BigInt</a> (v8 engine v6.7+ / Node.js v10.4.0+), throw error if the runtime does not support.</p></div><h4 id="js-native-api-h-1" tabindex="-1">js_native_api.h <a class="header-anchor" href="#js-native-api-h-1" aria-hidden="true">#</a></h4><ul><li><em><strong>napi_create_bigint_int64</strong></em></li><li><em><strong>napi_create_bigint_uint64</strong></em></li><li><em><strong>napi_create_bigint_words</strong></em></li><li><em><strong>napi_get_value_bigint_int64</strong></em></li><li><em><strong>napi_get_value_bigint_uint64</strong></em></li><li><em><strong>napi_get_value_bigint_words</strong></em></li></ul><h3 id="arraybuffer-related" tabindex="-1">ArrayBuffer related <a class="header-anchor" href="#arraybuffer-related" aria-hidden="true">#</a></h3><table><thead><tr><th>API</th><th>Condition of memory copy happening</th><th><code>data</code> memory copy direction</th><th><code>data</code> memory ownership</th></tr></thead><tbody><tr><td><code>napi_create_arraybuffer</code></td><td>user request <code>data</code></td><td><code>JS to WASM</code></td><td>if copy happens, managed by <code>emnapi</code> if runtime support <code>FinalizationRegistry</code>, otherwise <code>user</code> should manually free returned <code>data</code> pointer</td></tr><tr><td><code>napi_create_external_arraybuffer</code></td><td>always</td><td><code>WASM to JS</code></td><td><code>user</code></td></tr><tr><td><code>napi_get_arraybuffer_info</code></td><td>(user request <code>data</code>) <code>&amp;&amp;</code> (ArrayBuffer not created by emnapi <code>||</code> created by <code>napi_create_arraybuffer</code> but not request <code>data</code>)</td><td><code>JS to WASM</code></td><td>if copy happens, same rule as <code>napi_create_arraybuffer</code></td></tr><tr><td><code>napi_get_typedarray_info</code> <br><br> <code>napi_get_dataview_info</code> <br><br> <code>napi_get_buffer_info</code> (<code>node_api.h</code>)</td><td>(user request <code>data</code>) <code>&amp;&amp;</code> (not wasm memory view) <code>&amp;&amp;</code> (same rule of <code>napi_get_arraybuffer_info</code> for its ArrayBuffer)</td><td><code>JS to WASM</code></td><td>if copy happens, same rule as <code>napi_create_arraybuffer</code></td></tr><tr><td><code>napi_create_buffer</code></td><td>Never copy. if user request <code>data</code>, allocate memory and create a Buffer from wasm memory of this address, otherwise create a Buffer by <code>Buffer.alloc</code></td><td></td><td>if user request <code>data</code>, same rule as <code>napi_create_arraybuffer</code></td></tr><tr><td><code>napi_create_external_buffer</code></td><td>Never copy. Create a Buffer from wasm memory of <code>data</code> address</td><td></td><td><code>user</code></td></tr></tbody></table><p>You can use <code>emnapi_sync_memory</code> or export runtime method <code>emnapiSyncMemory</code> to do memory sync between wasm and JS. It&#39;s necessary if wasm memory grows or copied memory changed.</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">emnapi.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">napi_status </span><span style="color:#82AAFF;">emnapi_sync_memory</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">napi_env </span><span style="color:#A6ACCD;font-style:italic;">env</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                               </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">js_to_wasm</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                               napi_value</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arraybuffer_or_view</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                               </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">byte_offset</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                               </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">length</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">finalizer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">napi_env </span><span style="color:#A6ACCD;font-style:italic;">env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">finalize_data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">finalize_hint</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#82AAFF;">free</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">finalize_data</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">napi_value </span><span style="color:#82AAFF;">createExternalArraybuffer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">napi_env </span><span style="color:#A6ACCD;font-style:italic;">env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> napi_callback_info </span><span style="color:#A6ACCD;font-style:italic;">info</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">uint8_t</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> external_data </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">malloc</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">external_data</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">external_data</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">external_data</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  napi_value array_buffer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">napi_create_external_arraybuffer</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> external_data</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> finalizer</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">array_buffer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">external_data</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // JavaScript ArrayBuffer memory will not change</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">emnapi_sync_memory</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#F07178;"> array_buffer</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> NAPI_AUTO_LENGTH</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// after sync memory, new Uint8Array(array_buffer)[0] === 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> array_buffer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">emnapiSyncMemory</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">jsToWasm</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">arrayBufferOrView</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArrayBuffer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArrayBufferView</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">byteOffset</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">length</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> array_buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Module</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">emnapiExports</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createExternalArraybuffer</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Uint8Array</span><span style="color:#A6ACCD;">(array_buffer)[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">Module</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">emnapiSyncMemory</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> array_buffer)</span></span>
<span class="line"></span></code></pre></div><p>You can use <code>emnapi_get_memory_address</code> or export runtime method <code>emnapiGetMemoryAddress</code> to check if the memory should be released manually.</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">emnapi.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">napi_get_typedarray_info</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> typedarray</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">emnapi_ownership ownership</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> runtime_allocated</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">emnapi_get_memory_address</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> typedarray</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">address</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">ownership</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;font-style:italic;">runtime_allocated</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">assert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">address </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NULL</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> runtime_allocated </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> ownership </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> emnapi_userland</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// user should free data</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// free(data);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>emnapi_get_memory_address</code> on wasm memory views may return wrong <code>ownership</code> and <code>runtime_allocated</code>. For example, you created an <code>ArrayBuffer</code> by using <code>napi_create_arraybuffer</code> and requested a copied <code>data</code>, then use <code>napi_create_external_buffer</code> to create a view from the <code>data</code>.</p></div><h3 id="buffer-related" tabindex="-1">Buffer related <a class="header-anchor" href="#buffer-related" aria-hidden="true">#</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>These APIs require <code>globalThis.Buffer</code>, otherwise return <code>napi_invalid_arg</code> or <code>napi_pending_exception</code>.</p><p>If you would use them in browsers, you can use <a href="https://github.com/feross/buffer" target="_blank" rel="noreferrer">feross/buffer</a>.</p></div><ul><li><em><strong>napi_create_buffer</strong></em></li><li><em><strong>napi_create_external_buffer</strong></em></li><li><em><strong>napi_create_buffer_copy</strong></em></li><li><em><strong>napi_is_buffer</strong></em></li><li><em><strong>napi_get_buffer_info</strong></em></li></ul><h3 id="cleanup-hook-related" tabindex="-1">Cleanup hook related <a class="header-anchor" href="#cleanup-hook-related" aria-hidden="true">#</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Cleanup hooks are added on <code>Context</code>, they will be called if the <code>Context</code> dispose.</p><p>On Node.js, <code>Context.prototype.dispose</code> will be called automatically on process <code>beforeExit</code> event.</p></div><h4 id="node-api-h-1" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h-1" aria-hidden="true">#</a></h4><ul><li><em><strong>napi_add_env_cleanup_hook</strong></em></li><li><em><strong>napi_remove_env_cleanup_hook</strong></em></li><li><em><strong>napi_add_async_cleanup_hook</strong></em></li><li><em><strong>napi_remove_async_cleanup_hook</strong></em></li></ul><h3 id="memory-management" tabindex="-1">Memory management <a class="header-anchor" href="#memory-management" aria-hidden="true">#</a></h3><h4 id="js-native-api-h-2" tabindex="-1">js_native_api.h <a class="header-anchor" href="#js-native-api-h-2" aria-hidden="true">#</a></h4><ul><li><em><strong>napi_adjust_external_memory</strong></em> (<code>change_in_bytes</code> must be a positive integer)</li></ul><h3 id="asynchronous-operation-on-node-js" tabindex="-1">Asynchronous operation on Node.js <a class="header-anchor" href="#asynchronous-operation-on-node-js" aria-hidden="true">#</a></h3><h4 id="node-api-h-2" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h-2" aria-hidden="true">#</a></h4><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>These APIs only work on Node.js and require <code>@emnapi/node-binding</code> when calling <code>emnapiInit</code>.</p></div><ul><li><em><strong>napi_async_init</strong></em></li><li><em><strong>napi_async_destroy</strong></em></li><li><em><strong>napi_make_callback</strong></em></li></ul><h3 id="multithread-related" tabindex="-1">Multithread related <a class="header-anchor" href="#multithread-related" aria-hidden="true">#</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>These APIs added in emnapi v0.15.0 require Emscripten pthread support (<code>-sUSE_PTHREADS=1</code>), also recommand to specifying thread pool size explicitly (<code>-sPTHREAD_POOL_SIZE=4</code>), wasi-sdk has not supported thread yet.</p><p>Require target environment has <code>Worker</code> and <code>SharedArrayBuffer</code> support. If target environment is browser, require</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Cross-Origin-Opener-Policy: same-origin</span></span>
<span class="line"><span style="color:#A6ACCD;">Cross-Origin-Embedder-Policy: require-corp</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>in response headers.</p><p>The <code>async_resource</code> and <code>async_resource_name</code> parameter have no effect on browser, only work on Node.js and require <code>@emnapi/node-binding</code> when calling <code>emnapiInit</code>.</p></div><h4 id="node-api-h-3" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h-3" aria-hidden="true">#</a></h4><ul><li><em><strong>napi_create_async_work</strong></em></li><li><em><strong>napi_delete_async_work</strong></em></li><li><em><strong>napi_queue_async_work</strong></em></li><li><em><strong>napi_cancel_async_work</strong></em></li><li><em><strong>napi_create_threadsafe_function</strong></em></li><li><em><strong>napi_get_threadsafe_function_context</strong></em></li><li><em><strong>napi_call_threadsafe_function</strong></em></li><li><em><strong>napi_acquire_threadsafe_function</strong></em></li><li><em><strong>napi_release_threadsafe_function</strong></em></li><li><em><strong>napi_unref_threadsafe_function</strong></em></li><li><em><strong>napi_ref_threadsafe_function</strong></em></li></ul><h3 id="other-api" tabindex="-1">Other API <a class="header-anchor" href="#other-api" aria-hidden="true">#</a></h3><h4 id="node-api-h-4" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h-4" aria-hidden="true">#</a></h4><ul><li><em><strong>napi_get_uv_event_loop</strong></em>: Returns fake <code>uv_loop_t</code> used by thread pool related functions if pthread is enabled.</li><li><em><strong>napi_fatal_exception</strong></em>: Calls <code>process._fatalException</code> on Node.js. Returns <code>napi_generic_failure</code> on non-Node.js environment.</li><li><em><strong>node_api_get_module_file_name</strong></em>: Returns the filename which is passed to <code>Module.emnapiInit({ context, filename })</code>.</li></ul><h2 id="available-anytime" tabindex="-1">Available Anytime <a class="header-anchor" href="#available-anytime" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Feel free to use the following APIs.</p></div><h4 id="js-native-api-h-3" tabindex="-1">js_native_api.h <a class="header-anchor" href="#js-native-api-h-3" aria-hidden="true">#</a></h4><ul><li>napi_get_last_error_info</li><li>napi_get_undefined</li><li>napi_get_null</li><li>napi_get_global</li><li>napi_get_boolean</li><li>napi_create_object</li><li>napi_create_array</li><li>napi_create_array_with_length</li><li>napi_create_double</li><li>napi_create_int32</li><li>napi_create_uint32</li><li>napi_create_int64</li><li>napi_create_string_latin1</li><li>napi_create_string_utf8</li><li>napi_create_string_utf16</li><li>napi_create_symbol</li><li><strong>node_api_symbol_for (NAPI_EXPERIMENTAL)</strong></li><li>napi_create_function</li><li>napi_create_error</li><li>napi_create_type_error</li><li>napi_create_range_error</li><li><strong>node_api_create_syntax_error (NAPI_EXPERIMENTAL)</strong></li><li>napi_typeof</li><li>napi_get_value_double</li><li>napi_get_value_int32</li><li>napi_get_value_uint32</li><li>napi_get_value_int64</li><li>napi_get_value_bool</li><li>napi_get_value_string_latin1</li><li>napi_get_value_string_utf8</li><li>napi_get_value_string_utf16</li><li>napi_coerce_to_bool</li><li>napi_coerce_to_number</li><li>napi_coerce_to_object</li><li>napi_coerce_to_string</li><li>napi_get_prototype</li><li>napi_get_property_names</li><li>napi_set_property</li><li>napi_has_property</li><li>napi_get_property</li><li>napi_delete_property</li><li>napi_has_own_property</li><li>napi_set_named_property</li><li>napi_has_named_property</li><li>napi_get_named_property</li><li>napi_set_element</li><li>napi_has_element</li><li>napi_get_element</li><li>napi_delete_element</li><li>napi_define_properties</li><li>napi_is_array</li><li>napi_get_array_length</li><li>napi_strict_equals</li><li>napi_call_function</li><li>napi_new_instance</li><li>napi_instanceof</li><li>napi_get_cb_info</li><li>napi_get_new_target</li><li>napi_define_class</li><li>napi_open_handle_scope</li><li>napi_close_handle_scope</li><li>napi_open_escapable_handle_scope</li><li>napi_close_escapable_handle_scope</li><li>napi_escape_handle</li><li>napi_throw</li><li>napi_throw_error</li><li>napi_throw_type_error</li><li>napi_throw_range_error</li><li><strong>node_api_throw_syntax_error (NAPI_EXPERIMENTAL)</strong></li><li>napi_is_error</li><li>napi_is_exception_pending</li><li>napi_get_and_clear_last_exception</li><li>napi_is_arraybuffer</li><li>napi_is_typedarray</li><li>napi_create_typedarray</li><li>napi_create_dataview</li><li>napi_is_dataview</li><li>napi_detach_arraybuffer</li><li>napi_is_detached_arraybuffer</li><li>napi_get_version</li><li>napi_create_promise</li><li>napi_resolve_deferred</li><li>napi_reject_deferred</li><li>napi_is_promise</li><li>napi_run_script</li><li>napi_create_date</li><li>napi_is_date</li><li>napi_get_date_value</li><li>napi_get_all_property_names</li><li>napi_set_instance_data</li><li>napi_get_instance_data</li><li>napi_object_freeze</li><li>napi_object_seal</li><li>napi_type_tag_object</li><li>napi_check_object_type_tag</li><li>napi_unwrap</li><li>napi_remove_wrap</li><li>napi_get_value_external</li><li>napi_delete_reference</li><li>napi_reference_ref</li><li>napi_get_reference_value</li></ul><h4 id="node-api-h-5" tabindex="-1">node_api.h <a class="header-anchor" href="#node-api-h-5" aria-hidden="true">#</a></h4><ul><li>napi_fatal_error</li><li>napi_get_node_version</li></ul>`,49),t=[o];function r(p,i,c,d,_,y){return a(),s("div",null,t)}const F=e(l,[["render",r]]);export{h as __pageData,F as default};
