import{_ as n,o as s,c as a,a as t}from"./app.ccbb5984.js";const _='{"title":"Multithreaded Asynchronous Operations","description":"","frontmatter":{},"headers":[{"level":2,"title":"Preprocess Macro Options","slug":"preprocess-macro-options"},{"level":3,"title":"-DEMNAPI_WORKER_POOL_SIZE=4","slug":"demnapi-worker-pool-size-4"},{"level":3,"title":"-DEMNAPI_NEXTTICK_TYPE=0","slug":"demnapi-nexttick-type-0"},{"level":3,"title":"-DEMNAPI_USE_PROXYING=1","slug":"demnapi-use-proxying-1"},{"level":2,"title":"Example","slug":"example"},{"level":2,"title":"Node-API Implementation","slug":"node-api-implementation"},{"level":3,"title":"Helper Macros and Initialization","slug":"helper-macros-and-initialization"},{"level":3,"title":"Binding Function","slug":"binding-function"},{"level":3,"title":"Execute","slug":"execute"},{"level":3,"title":"Complete","slug":"complete"},{"level":3,"title":"Return Promise","slug":"return-promise"},{"level":2,"title":"node-addon-api Implementation","slug":"node-addon-api-implementation"},{"level":3,"title":"Binding Function","slug":"binding-function-1"},{"level":3,"title":"Extending AsyncWorker Class","slug":"extending-asyncworker-class"},{"level":3,"title":"Return Promise","slug":"return-promise-1"}],"relativePath":"guide/multithreaded-async.md","lastUpdated":1673845773000}',p={},o=t(`<h1 id="multithreaded-asynchronous-operations" tabindex="-1">Multithreaded Asynchronous Operations <a class="header-anchor" href="#multithreaded-asynchronous-operations" aria-hidden="true">#</a></h1><ul><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_create_async_work" target="_blank" rel="noopener noreferrer">napi_create_async_work</a></li><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_delete_async_work" target="_blank" rel="noopener noreferrer">napi_delete_async_work</a></li><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_queue_async_work" target="_blank" rel="noopener noreferrer">napi_queue_async_work</a></li><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_cancel_async_work" target="_blank" rel="noopener noreferrer">napi_cancel_async_work</a></li></ul><p>Multithreaded asynchronous APIs require pthreads enabled and you need to compile additional source files. Recommend <a href="/emnapi-docs/guide/using-cmake.html">use CMake</a> directly.</p><div class="language-cmake"><pre><code><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span><span class="token string">&quot;<span class="token interpolation"><span class="token punctuation">\${</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">}</span></span>/node_modules/@tybys/emnapi&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello hello.c<span class="token punctuation">)</span>

<span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>hello emnapi_full-mt<span class="token punctuation">)</span>
<span class="token keyword">target_compile_options</span><span class="token punctuation">(</span>hello <span class="token namespace">PRIVATE</span> <span class="token string">&quot;-sUSE_PTHREADS=1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">target_link_options</span><span class="token punctuation">(</span>hello <span class="token namespace">PRIVATE</span>
  <span class="token string">&quot;-sALLOW_MEMORY_GROWTH=1&quot;</span>
  <span class="token string">&quot;-sEXPORTED_FUNCTIONS=[&#39;_malloc&#39;,&#39;_free&#39;]&quot;</span>
  <span class="token string">&quot;-sUSE_PTHREADS=1&quot;</span>
  <span class="token string">&quot;-sPTHREAD_POOL_SIZE=4&quot;</span>
  <span class="token comment"># try to specify stack size if you experience pthread errors</span>
  <span class="token string">&quot;-sSTACK_SIZE=2MB&quot;</span>
  <span class="token string">&quot;-sDEFAULT_PTHREAD_STACK_SIZE=2MB&quot;</span>
<span class="token punctuation">)</span>
</code></pre></div><div class="language-bash"><pre><code>emcmake cmake <span class="token parameter variable">-DCMAKE_BUILD_TYPE</span><span class="token operator">=</span>Release <span class="token parameter variable">-DEMNAPI_WORKER_POOL_SIZE</span><span class="token operator">=</span><span class="token number">4</span> <span class="token parameter variable">-G</span> Ninja -H. <span class="token parameter variable">-Bbuild</span>
cmake <span class="token parameter variable">--build</span> build
</code></pre></div><p>Specifying thread pool size is also recommended:</p><div class="language-cmake"><pre><code><span class="token keyword">target_link_options</span><span class="token punctuation">(</span>hello <span class="token namespace">PRIVATE</span>
  <span class="token string">&quot;-sUSE_PTHREADS=1&quot;</span>
  <span class="token string">&quot;-sPTHREAD_POOL_SIZE=4&quot;</span>
<span class="token punctuation">)</span>
</code></pre></div><h2 id="preprocess-macro-options" tabindex="-1">Preprocess Macro Options <a class="header-anchor" href="#preprocess-macro-options" aria-hidden="true">#</a></h2><h3 id="demnapi-worker-pool-size-4" tabindex="-1"><code>-DEMNAPI_WORKER_POOL_SIZE=4</code> <a class="header-anchor" href="#demnapi-worker-pool-size-4" aria-hidden="true">#</a></h3><p>This is <a href="http://docs.libuv.org/en/v1.x/threadpool.html?highlight=UV_THREADPOOL_SIZE" target="_blank" rel="noopener noreferrer"><code>UV_THREADPOOL_SIZE</code></a> equivalent at compile time, if not predefined, emnapi will read <code>UV_THREADPOOL_SIZE</code> from Emscripten <a href="https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#interacting-with-code-environment-variables" target="_blank" rel="noopener noreferrer">environment variable</a> at runtime, you can set <code>UV_THREADPOOL_SIZE</code> like this:</p><div class="language-js"><pre><code>Module<span class="token punctuation">.</span>preRun <span class="token operator">=</span> Module<span class="token punctuation">.</span>preRun <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Module<span class="token punctuation">.</span>preRun<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token constant">ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">ENV</span><span class="token punctuation">.</span><span class="token constant">UV_THREADPOOL_SIZE</span> <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>It represent max of <code>EMNAPI_WORKER_POOL_SIZE</code> async work (<code>napi_queue_async_work</code>) can be executed in parallel. Default is not defined, read <code>UV_THREADPOOL_SIZE</code> at runtime.</p><p>You can set both <code>PTHREAD_POOL_SIZE</code> and <code>EMNAPI_WORKER_POOL_SIZE</code> to <code>number of CPU cores</code> in general. If you use another library function which may create <code>N</code> child threads in async work, then you need to set <code>PTHREAD_POOL_SIZE</code> to <code>EMNAPI_WORKER_POOL_SIZE * (N + 1)</code>.</p><p>This option only has effect if you use <code>-sUSE_PTHREADS</code>. Emnapi will create <code>EMNAPI_WORKER_POOL_SIZE</code> threads when initializing, it will throw error if <code>PTHREAD_POOL_SIZE &lt; EMNAPI_WORKER_POOL_SIZE &amp;&amp; PTHREAD_POOL_SIZE_STRICT == 2</code>.</p><p>See <a href="https://github.com/toyobayashi/emnapi/issues/8" target="_blank" rel="noopener noreferrer">Issue #8</a> for more detail.</p><h3 id="demnapi-nexttick-type-0" tabindex="-1"><code>-DEMNAPI_NEXTTICK_TYPE=0</code> <a class="header-anchor" href="#demnapi-nexttick-type-0" aria-hidden="true">#</a></h3><p>This option only has effect if you use <code>-sUSE_PTHREADS</code>, Default is <code>0</code>. Tell emnapi how to delay async work in <code>uv_async_send</code> / <code>uv__async_close</code>.</p><ul><li><code>0</code>: Use <code>setImmediate()</code> (Node.js native <code>setImmediate</code> or browser <code>MessageChannel</code> and <code>port.postMessage</code>)</li><li><code>1</code>: Use <code>Promise.resolve().then()</code></li></ul><h3 id="demnapi-use-proxying-1" tabindex="-1"><code>-DEMNAPI_USE_PROXYING=1</code> <a class="header-anchor" href="#demnapi-use-proxying-1" aria-hidden="true">#</a></h3><p>This option only has effect if you use <code>-sUSE_PTHREADS</code>. Default is <code>1</code> if emscripten version <code>&gt;= 3.1.9</code>, else <code>0</code>.</p><ul><li><p><code>0</code></p><p>Use JavaScript implementation to send async work from worker threads, runtime code will access the Emscripten internal <code>PThread</code> object to add custom worker message listener.</p></li><li><p><code>1</code>:</p><p>Use Emscripten <a href="https://emscripten.org/docs/api_reference/proxying.h.html" target="_blank" rel="noopener noreferrer">proxying API</a> to send async work from worker threads in C. If you experience something wrong, you can switch set this to <code>0</code> and feel free to create an issue.</p></li></ul><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2><p>Estimate the value of \u03C0 by using a Monte Carlo method in child threads. Take <code>points</code> samples of random x and y values on a [0,1][0,1] plane. Calculating the length of the diagonal tells us whether the point lies inside, or outside a quarter circle running from 0,1 to 1,0. The ratio of the number of points inside to outside gives us an approximation of \u03C0/4.</p><p>Exposed function signature:</p><div class="language-ts"><pre><code><span class="token comment">/** 
 * This function creates a child thread if
 * there are idle threads in the thread pool.
 * Callback will be called in main thread after calculating.
 */</span>
<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">estimate</span><span class="token punctuation">(</span>
  points<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  callback<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>err<span class="token operator">:</span> Error<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token punctuation">(</span>err<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> result<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><p>Use case:</p><div class="language-js"><pre><code>Module<span class="token punctuation">.</span><span class="token function-variable function">onRuntimeInitialized</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> calculations <span class="token operator">=</span> <span class="token number">100000000</span>
  <span class="token keyword">const</span> batches <span class="token operator">=</span> <span class="token number">16</span>
  <span class="token keyword">let</span> ended <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">function</span> <span class="token function">done</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    total <span class="token operator">+=</span> result<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>ended <span class="token operator">===</span> batches<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// have all the batches finished executing</span>
      <span class="token keyword">const</span> pi <span class="token operator">=</span> total <span class="token operator">/</span> batches
      <span class="token keyword">const</span> ms <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\t\u03C0 \u2248 &#39;</span> <span class="token operator">+</span> pi <span class="token operator">+</span>
                  <span class="token string">&#39; (&#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>pi <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; away from actual)&#39;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\tTook &#39;</span> <span class="token operator">+</span> ms <span class="token operator">+</span> <span class="token string">&#39;ms&#39;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> batches<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Module<span class="token punctuation">.</span>emnapiExports<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>C implementation:</p><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">double</span> <span class="token function">monte_carlo_estimate_pi</span><span class="token punctuation">(</span><span class="token keyword">int</span> points<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">static</span> <span class="token class-name">pthread_mutex_t</span> mutex <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> randseed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> <span class="token function">monte_carlo_estimate_pi</span><span class="token punctuation">(</span><span class="token keyword">int</span> points<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> points<span class="token punctuation">;</span>
  <span class="token keyword">int</span> inside <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> seed<span class="token punctuation">;</span>

  <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>randseed <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    randseed <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  seed <span class="token operator">=</span> <span class="token function">rand_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>randseed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> rand_max <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> RAND_MAX<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token function">rand_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>seed<span class="token punctuation">)</span> <span class="token operator">/</span> rand_max<span class="token punctuation">;</span>
    <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token function">rand_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>seed<span class="token punctuation">)</span> <span class="token operator">/</span> rand_max<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">++</span>inside<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>inside <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> points<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="node-api-implementation" tabindex="-1">Node-API Implementation <a class="header-anchor" href="#node-api-implementation" aria-hidden="true">#</a></h2><h3 id="helper-macros-and-initialization" tabindex="-1">Helper Macros and Initialization <a class="header-anchor" href="#helper-macros-and-initialization" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;node_api.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NAPI_CALL_BASE</span><span class="token expression"><span class="token punctuation">(</span>env<span class="token punctuation">,</span> the_call<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token comment">/* ... */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NAPI_CALL</span><span class="token expression"><span class="token punctuation">(</span>env<span class="token punctuation">,</span> the_call<span class="token punctuation">)</span>           </span><span class="token comment">/* ... */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NAPI_CALL_VOID</span><span class="token expression"><span class="token punctuation">(</span>env<span class="token punctuation">,</span> the_call<span class="token punctuation">)</span>      </span><span class="token comment">/* ... */</span></span>

<span class="token function">NAPI_MODULE_INIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  napi_value estimate_fn<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_create_function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;estimate&quot;</span><span class="token punctuation">,</span> NAPI_AUTO_LENGTH<span class="token punctuation">,</span>
                                      js_estimate<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>estimate_fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_set_named_property</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> exports<span class="token punctuation">,</span>
                                         <span class="token string">&quot;estimate&quot;</span><span class="token punctuation">,</span> estimate_fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="binding-function" tabindex="-1">Binding Function <a class="header-anchor" href="#binding-function" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> points<span class="token punctuation">;</span>
  <span class="token keyword">double</span> result<span class="token punctuation">;</span>
  napi_ref callback<span class="token punctuation">;</span>
  napi_async_work work<span class="token punctuation">;</span>
<span class="token punctuation">}</span> estimate_request<span class="token punctuation">;</span>

<span class="token keyword">static</span> napi_value <span class="token function">js_estimate</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">size_t</span> argc <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  napi_value args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  napi_valuetype valuetype0<span class="token punctuation">,</span> valuetype1<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype0 <span class="token operator">!=</span> napi_number <span class="token operator">||</span> valuetype1 <span class="token operator">!=</span> napi_function<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  estimate_request<span class="token operator">*</span> request <span class="token operator">=</span>
    <span class="token punctuation">(</span>estimate_request<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>estimate_request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;malloc failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  napi_status status<span class="token punctuation">;</span>

  status <span class="token operator">=</span> <span class="token function">napi_get_value_int32</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>request<span class="token operator">-&gt;</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  status <span class="token operator">=</span> <span class="token function">napi_create_reference</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>request<span class="token operator">-&gt;</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  status <span class="token operator">=</span> <span class="token function">napi_create_async_work</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                                  estimate_on_execute<span class="token punctuation">,</span>
                                  estimate_on_complete<span class="token punctuation">,</span>
                                  request<span class="token punctuation">,</span>
                                  <span class="token operator">&amp;</span>request<span class="token operator">-&gt;</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  status <span class="token operator">=</span> <span class="token function">napi_queue_async_work</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> request<span class="token operator">-&gt;</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="execute" tabindex="-1">Execute <a class="header-anchor" href="#execute" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token comment">// invoked in child thread</span>
<span class="token comment">// can not interact with JavaScript</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">estimate_on_execute</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  estimate_request<span class="token operator">*</span> request <span class="token operator">=</span> <span class="token punctuation">(</span>estimate_request<span class="token operator">*</span><span class="token punctuation">)</span> data<span class="token punctuation">;</span>
  request<span class="token operator">-&gt;</span>result <span class="token operator">=</span> <span class="token function">monte_carlo_estimate_pi</span><span class="token punctuation">(</span>request<span class="token operator">-&gt;</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="complete" tabindex="-1">Complete <a class="header-anchor" href="#complete" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token comment">// invoked in main thread</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">estimate_on_complete</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_status status<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  estimate_request<span class="token operator">*</span> req <span class="token operator">=</span> <span class="token punctuation">(</span>estimate_request<span class="token operator">*</span><span class="token punctuation">)</span> data<span class="token punctuation">;</span>
  estimate_request request <span class="token operator">=</span> <span class="token operator">*</span>req<span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
  napi_value undefined<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> callback_ret<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_undefined</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token operator">&amp;</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_reference_value</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span>
                                               request<span class="token punctuation">.</span>callback<span class="token punctuation">,</span>
                                               <span class="token operator">&amp;</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    napi_value err<span class="token punctuation">,</span> errmsg<span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_create_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Execute failed.&quot;</span><span class="token punctuation">,</span>
                                                NAPI_AUTO_LENGTH<span class="token punctuation">,</span>
                                                <span class="token operator">&amp;</span>errmsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_create_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> errmsg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_call_function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> callback<span class="token punctuation">,</span>
                                           <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">,</span> <span class="token operator">&amp;</span>callback_ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    napi_value callback_argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_null</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> callback_argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_create_double</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span>
                                          request<span class="token punctuation">.</span>result<span class="token punctuation">,</span> callback_argv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_call_function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> callback<span class="token punctuation">,</span>
                                          <span class="token number">2</span><span class="token punctuation">,</span> callback_argv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>callback_ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_delete_reference</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> request<span class="token punctuation">.</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_delete_async_work</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> request<span class="token punctuation">.</span>work<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="return-promise" tabindex="-1">Return Promise <a class="header-anchor" href="#return-promise" aria-hidden="true">#</a></h3><p>Function signature:</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">estimate</span><span class="token punctuation">(</span>points<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>
</code></pre></div><p>Request structure:</p><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> points<span class="token punctuation">;</span>
  <span class="token keyword">double</span> result<span class="token punctuation">;</span>
  napi_deferred deferred<span class="token punctuation">;</span>
  napi_async_work work<span class="token punctuation">;</span>
<span class="token punctuation">}</span> estimate_request<span class="token punctuation">;</span>
</code></pre></div><p>Return promise:</p><div class="language-c"><pre><code><span class="token keyword">static</span> napi_value <span class="token function">js_estimate</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  napi_value promise<span class="token punctuation">;</span>
  <span class="token function">napi_create_promise</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token operator">&amp;</span>request<span class="token operator">-&gt;</span>deferred<span class="token punctuation">,</span> <span class="token operator">&amp;</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ...</span>

  <span class="token keyword">return</span> promise<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Resolve or reject on complete</p><div class="language-c"><pre><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">estimate_on_complete</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_status status<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_reject_deferred</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> request<span class="token punctuation">.</span>deferred<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_resolve_deferred</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> request<span class="token punctuation">.</span>deferred<span class="token punctuation">,</span> callback_argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="node-addon-api-implementation" tabindex="-1">node-addon-api Implementation <a class="header-anchor" href="#node-addon-api-implementation" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You <strong>can not</strong> use node-addon-api if the runtime does not support <code>FinalizationRegistry</code> and <code>WeakRef</code>.</p></div><ul><li><a href="https://github.com/nodejs/node-addon-api/blob/v5.0.0/doc/async_worker.md" target="_blank" rel="noopener noreferrer">node-addon-api AsyncWorker Class</a></li></ul><h3 id="binding-function-1" tabindex="-1">Binding Function <a class="header-anchor" href="#binding-function-1" aria-hidden="true">#</a></h3><div class="language-cpp"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;napi.h&gt;</span></span>

<span class="token keyword">static</span> Napi<span class="token double-colon punctuation">::</span>Value <span class="token function">JsEstimate</span><span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>CallbackInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">int</span> points <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Number<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Uint32Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Napi<span class="token double-colon punctuation">::</span>Function callback <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Function<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span><span class="token operator">*</span> piWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MonteCarloEstimatePiWorker</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  piWorker<span class="token operator">-&gt;</span><span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> info<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Undefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Napi<span class="token double-colon punctuation">::</span>Object <span class="token function">Init</span><span class="token punctuation">(</span>Napi<span class="token double-colon punctuation">::</span>Env env<span class="token punctuation">,</span> Napi<span class="token double-colon punctuation">::</span>Object exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  exports<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>Napi<span class="token double-colon punctuation">::</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;estimate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              Napi<span class="token double-colon punctuation">::</span><span class="token class-name">Function</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> JsEstimate<span class="token punctuation">,</span> <span class="token string">&quot;estimate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">NODE_API_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Init<span class="token punctuation">)</span>
</code></pre></div><h3 id="extending-asyncworker-class" tabindex="-1">Extending AsyncWorker Class <a class="header-anchor" href="#extending-asyncworker-class" aria-hidden="true">#</a></h3><div class="language-cpp"><pre><code><span class="token keyword">class</span> <span class="token class-name">MonteCarloEstimatePiWorker</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">AsyncWorker</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">MonteCarloEstimatePiWorker</span><span class="token punctuation">(</span><span class="token keyword">int</span> points<span class="token punctuation">,</span> <span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>Function<span class="token operator">&amp;</span> callback<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">AsyncWorker</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">points_</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">result_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// in child thread</span>
    result_ <span class="token operator">=</span> <span class="token function">monte_carlo_estimate_pi</span><span class="token punctuation">(</span>points_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">OnOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// in main thread</span>
    <span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Undefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      Napi<span class="token double-colon punctuation">::</span><span class="token class-name">Number</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result_<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">OnError</span><span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>Error<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// in main thread</span>
    <span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Undefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> points_<span class="token punctuation">;</span>
  <span class="token keyword">double</span> result_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="return-promise-1" tabindex="-1">Return Promise <a class="header-anchor" href="#return-promise-1" aria-hidden="true">#</a></h3><p>Function signature:</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">estimate</span><span class="token punctuation">(</span>points<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>
</code></pre></div><div class="language-cpp"><pre><code><span class="token keyword">class</span> <span class="token class-name">MonteCarloEstimatePiWorker</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">AsyncWorker</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">MonteCarloEstimatePiWorker</span><span class="token punctuation">(</span><span class="token keyword">int</span> points<span class="token punctuation">,</span> <span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>Promise<span class="token double-colon punctuation">::</span>Deferred<span class="token operator">&amp;</span> deferred<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">AsyncWorker</span><span class="token punctuation">(</span>deferred<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">points_</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">result_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">deferred_</span><span class="token punctuation">(</span>deferred<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result_ <span class="token operator">=</span> <span class="token function">monte_carlo_estimate_pi</span><span class="token punctuation">(</span>points_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">OnOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    deferred_<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>Napi<span class="token double-colon punctuation">::</span><span class="token class-name">Number</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">OnError</span><span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>Error<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    deferred_<span class="token punctuation">.</span><span class="token function">Reject</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> points_<span class="token punctuation">;</span>
  <span class="token keyword">double</span> result_<span class="token punctuation">;</span>
  Napi<span class="token double-colon punctuation">::</span>Promise<span class="token double-colon punctuation">::</span>Deferred deferred_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> Napi<span class="token double-colon punctuation">::</span>Value <span class="token function">JsEstimate</span><span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>CallbackInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">int</span> points <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Number<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Uint32Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Napi<span class="token double-colon punctuation">::</span>Promise<span class="token double-colon punctuation">::</span>Deferred deferred <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span>Promise<span class="token double-colon punctuation">::</span><span class="token class-name">Deferred</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span><span class="token operator">*</span> piWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MonteCarloEstimatePiWorker</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> deferred<span class="token punctuation">)</span><span class="token punctuation">;</span>
  piWorker<span class="token operator">-&gt;</span><span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> deferred<span class="token punctuation">.</span><span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,58),e=[o];function c(u,l,i,k,r,d){return s(),a("div",null,e)}var f=n(p,[["render",c]]);export{_ as __pageData,f as default};
