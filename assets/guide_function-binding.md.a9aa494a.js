import{_ as n,o as s,c as a,a as t}from"./app.4adeb6ac.js";const g='{"title":"Function Binding","description":"","frontmatter":{},"headers":[{"level":2,"title":"Arguments Handling","slug":"arguments-handling"},{"level":3,"title":"Node-API Implementation","slug":"node-api-implementation"},{"level":3,"title":"node-addon-api Implementation","slug":"node-addon-api-implementation"},{"level":2,"title":"Passing Callback","slug":"passing-callback"},{"level":3,"title":"Node-API Implementation","slug":"node-api-implementation-1"},{"level":3,"title":"node-addon-api Implementation","slug":"node-addon-api-implementation-1"}],"relativePath":"guide/function-binding.md","lastUpdated":1669023792000}',p={},o=t(`<h1 id="function-binding" tabindex="-1">Function Binding <a class="header-anchor" href="#function-binding" aria-hidden="true">#</a></h1><h2 id="arguments-handling" tabindex="-1">Arguments Handling <a class="header-anchor" href="#arguments-handling" aria-hidden="true">#</a></h2><p>Suppose you need to write a C function to concat two JavaScript string:</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">concatString</span> <span class="token punctuation">(</span>str1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> str2<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
</code></pre></div><div class="language-js"><pre><code>Module<span class="token punctuation">.</span><span class="token function-variable function">onRuntimeInitialized</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> Module<span class="token punctuation">.</span>emnapiExports<span class="token punctuation">.</span><span class="token function">concatString</span><span class="token punctuation">(</span><span class="token string">&#39;Hello &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u4E16\u754C&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// &#39;Hello \u4E16\u754C&#39;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="node-api-implementation" tabindex="-1">Node-API Implementation <a class="header-anchor" href="#node-api-implementation" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;node_api.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NAPI_CALL</span><span class="token expression"><span class="token punctuation">(</span>env<span class="token punctuation">,</span> the_call<span class="token punctuation">)</span> </span><span class="token comment">/* ... */</span></span>

<span class="token keyword">static</span> napi_value <span class="token function">js_concat_string</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">size_t</span> argc <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  napi_value args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  napi_valuetype valuetype0<span class="token punctuation">,</span> valuetype1<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype0 <span class="token operator">!=</span> napi_string <span class="token operator">||</span> valuetype1 <span class="token operator">!=</span> napi_string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">size_t</span> len1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> len2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>len1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>len2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">size_t</span> total_buffer_size <span class="token operator">=</span> len1 <span class="token operator">+</span> len2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>total_buffer_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;malloc failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  napi_status status <span class="token operator">=</span> <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                                  str<span class="token punctuation">,</span> total_buffer_size<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  status <span class="token operator">=</span> <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                      str <span class="token operator">+</span> len1<span class="token punctuation">,</span> total_buffer_size <span class="token operator">-</span> len1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>str <span class="token operator">+</span> len1 <span class="token operator">+</span> len2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

  napi_value ret<span class="token punctuation">;</span>
  status <span class="token operator">=</span> <span class="token function">napi_create_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> str<span class="token punctuation">,</span> len1 <span class="token operator">+</span> len2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">NAPI_MODULE_INIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  napi_value concat_string_fn<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_create_function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;concatString&quot;</span><span class="token punctuation">,</span> NAPI_AUTO_LENGTH<span class="token punctuation">,</span>
                                      js_concat_string<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>concat_string_fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_set_named_property</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> exports<span class="token punctuation">,</span>
                                         <span class="token string">&quot;concatString&quot;</span><span class="token punctuation">,</span> concat_string_fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="node-addon-api-implementation" tabindex="-1">node-addon-api Implementation <a class="header-anchor" href="#node-addon-api-implementation" aria-hidden="true">#</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You <strong>can not</strong> use node-addon-api if the runtime does not support <code>FinalizationRegistry</code> and <code>WeakRef</code>.</p></div><div class="language-cpp"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;napi.h&gt;</span></span>

Napi<span class="token double-colon punctuation">::</span>Value <span class="token function">JsConcatString</span><span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>CallbackInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  std<span class="token double-colon punctuation">::</span>string str1 <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>String<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Utf8Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string str2 <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>String<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Utf8Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string result <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>

  <span class="token keyword">return</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Napi<span class="token double-colon punctuation">::</span>Object <span class="token function">Init</span><span class="token punctuation">(</span>Napi<span class="token double-colon punctuation">::</span>Env env<span class="token punctuation">,</span> Napi<span class="token double-colon punctuation">::</span>Object exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  exports<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>Napi<span class="token double-colon punctuation">::</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;concatString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              Napi<span class="token double-colon punctuation">::</span><span class="token class-name">Function</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> JsConcatString<span class="token punctuation">,</span> <span class="token string">&quot;concatString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">NODE_API_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Init<span class="token punctuation">)</span>
</code></pre></div><h2 id="passing-callback" tabindex="-1">Passing Callback <a class="header-anchor" href="#passing-callback" aria-hidden="true">#</a></h2><p>Let&#39;s change the example above, passing a JavaScript callback to receive the concat result.</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">concatString</span> <span class="token punctuation">(</span>
  str1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  str2<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><div class="language-js"><pre><code>Module<span class="token punctuation">.</span><span class="token function-variable function">onRuntimeInitialized</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Module<span class="token punctuation">.</span>emnapiExports<span class="token punctuation">.</span><span class="token function">concatString</span><span class="token punctuation">(</span><span class="token string">&#39;Hello &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u4E16\u754C&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// &#39;Hello \u4E16\u754C&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="node-api-implementation-1" tabindex="-1">Node-API Implementation <a class="header-anchor" href="#node-api-implementation-1" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token keyword">static</span> napi_value <span class="token function">js_concat_string</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">size_t</span> argc <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  napi_value args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  napi_valuetype valuetype0<span class="token punctuation">,</span> valuetype1<span class="token punctuation">,</span> valuetype2<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype0 <span class="token operator">!=</span> napi_string <span class="token operator">||</span> valuetype1 <span class="token operator">!=</span> napi_string <span class="token operator">||</span> valuetype2 <span class="token operator">!=</span> napi_function<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">size_t</span> len1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> len2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>len1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>len2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">size_t</span> total_buffer_size <span class="token operator">=</span> len1 <span class="token operator">+</span> len2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>total_buffer_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;malloc failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  napi_status status <span class="token operator">=</span> <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                                  str<span class="token punctuation">,</span> total_buffer_size<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  status <span class="token operator">=</span> <span class="token function">napi_get_value_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                      str <span class="token operator">+</span> len1<span class="token punctuation">,</span> total_buffer_size <span class="token operator">-</span> len1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>str <span class="token operator">+</span> len1 <span class="token operator">+</span> len2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

  napi_value ret<span class="token punctuation">;</span>
  status <span class="token operator">=</span> <span class="token function">napi_create_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> str<span class="token punctuation">,</span> len1 <span class="token operator">+</span> len2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>

  napi_value undefined<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_undefined</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token operator">&amp;</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  napi_value ignored<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_call_function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ignored<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> undefined<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="node-addon-api-implementation-1" tabindex="-1">node-addon-api Implementation <a class="header-anchor" href="#node-addon-api-implementation-1" aria-hidden="true">#</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You <strong>can not</strong> use node-addon-api if the runtime does not support <code>FinalizationRegistry</code> and <code>WeakRef</code>.</p></div><div class="language-cpp"><pre><code>Napi<span class="token double-colon punctuation">::</span>Value <span class="token function">JsConcatString</span><span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>CallbackInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  Napi<span class="token double-colon punctuation">::</span>Value undefined <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">Undefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>string str1 <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>String<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Utf8Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string str2 <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>String<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Utf8Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string result <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>

  info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Function<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> <span class="token punctuation">{</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> undefined<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,19),c=[o];function e(u,l,i,k,r,d){return s(),a("div",null,c)}var _=n(p,[["render",e]]);export{g as __pageData,_ as default};
