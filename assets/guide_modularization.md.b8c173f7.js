import{_ as n,o as a,c as s,a as t}from"./app.0ba8a14d.js";const g='{"title":"Modularization","description":"","frontmatter":{},"headers":[{"level":2,"title":"Using MODULARIZE Setting","slug":"using-modularize-setting"},{"level":2,"title":"Using emwrap","slug":"using-emwrap"}],"relativePath":"guide/modularization.md","lastUpdated":1662189195000}',p={},o=t(`<h1 id="modularization" tabindex="-1">Modularization <a class="header-anchor" href="#modularization" aria-hidden="true">#</a></h1><p>By default Emscripten emit all code in a straightforward way into the output .js file. That means that if you load that in a script tag in a web page, it will use the global scope.</p><div class="language-js"><pre><code><span class="token comment">// the output js</span>

<span class="token keyword">var</span> Module <span class="token operator">=</span> <span class="token keyword">typeof</span> Module <span class="token operator">!==</span> <span class="token string">&quot;undefined&quot;</span> <span class="token operator">?</span> Module <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// var ...</span>

<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="using-modularize-setting" tabindex="-1">Using <code>MODULARIZE</code> Setting <a class="header-anchor" href="#using-modularize-setting" aria-hidden="true">#</a></h2><p>You can set <code>-sMODULARIZE</code> and <code>-sEXPORT_NAME=createModule</code> to tell Emscripten to emit UMD module, the code is wrapped in the exported factory function that returns a promise.</p><div class="language-js"><pre><code><span class="token keyword">var</span> createModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> _scriptDir <span class="token operator">=</span> <span class="token keyword">typeof</span> document <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>currentScript <span class="token operator">?</span> document<span class="token punctuation">.</span>currentScript<span class="token punctuation">.</span>src <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> __filename <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> _scriptDir <span class="token operator">=</span> _scriptDir <span class="token operator">||</span> __filename<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">createModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  createModule <span class="token operator">=</span> createModule <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> Module <span class="token operator">=</span> <span class="token keyword">typeof</span> createModule <span class="token operator">!==</span> <span class="token string">&quot;undefined&quot;</span> <span class="token operator">?</span> createModule <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

Module<span class="token punctuation">[</span><span class="token string">&quot;ready&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  readyPromiseResolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>
  readyPromiseReject <span class="token operator">=</span> reject<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> createModule<span class="token punctuation">.</span>ready<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span>
  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> createModule<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">[</span><span class="token string">&#39;amd&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> createModule<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span>
  exports<span class="token punctuation">[</span><span class="token string">&quot;createModule&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> createModule<span class="token punctuation">;</span>
</code></pre></div><p>The returned promise is resolved with the module instance when it is safe to run the compiled code, similar to the <code>onRuntimeInitialized</code> callback. You do not need to use the <code>onRuntimeInitialized</code> callback when using <code>-sMODULARIZE</code>.</p><p>The factory function accepts 1 parameter, an object with default values for the module instance, you can set emnapi runtime or initialization callback here:</p><div class="language-js"><pre><code><span class="token function">createModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">emnapiRuntime</span><span class="token operator">:</span> window<span class="token punctuation">.</span>__emnapi_runtime__<span class="token punctuation">,</span>
  <span class="token function">onEmnapiInitialized</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> emnapiExports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">Module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// access Module.emnapiExports</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// or</span>

<span class="token keyword">const</span> Module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">emnapiRuntime</span><span class="token operator">:</span> window<span class="token punctuation">.</span>__emnapi_runtime__<span class="token punctuation">,</span>
  <span class="token function-variable function">onEmnapiInitialized</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> emnapiExports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="using-emwrap" tabindex="-1">Using <code>emwrap</code> <a class="header-anchor" href="#using-emwrap" aria-hidden="true">#</a></h2><p>I built another Node.js CLI application named <a href="https://github.com/toyobayashi/emwrap" target="_blank" rel="noopener noreferrer">emwrap</a> for more flexible modularization.</p><p>Features:</p><ul><li>Support wrapping Emscripten code to UMD / CommonJS / ESM / Node.js ESM format</li><li>Support <code>WXWebAssembly</code> in WeChat miniprogram environment</li><li>Cache the promise result, means that fetch and compile wasm only once when calling factory function multiple times</li></ul><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> @tybys/emwrap
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You should avoid passing <code>-sMODULARIZE=1</code> or <code>-o mjs</code> extension to emcc / em++.</p></div><p>You can use <a href="https://emscripten.org/docs/tools_reference/emcc.html#emcc-minify" target="_blank" rel="noopener noreferrer"><code>--js-transform</code></a> option:</p><div class="language-bash"><pre><code>emcc <span class="token parameter variable">-o</span> glue.js <span class="token parameter variable">-O3</span> --js-transform <span class="token string">&quot;emwrap --name=myWasmLib&quot;</span> main.c
</code></pre></div><p>Windows:</p><div class="language-bash"><pre><code>emcc <span class="token parameter variable">-o</span> glue.js <span class="token parameter variable">-O3</span> --js-transform <span class="token string">&quot;emwrap.cmd --name=myWasmLib&quot;</span> main.c
</code></pre></div><p>or in two steps:</p><div class="language-bash"><pre><code>emcc <span class="token parameter variable">-o</span> glue.js <span class="token parameter variable">-O3</span> main.c
emwrap <span class="token parameter variable">--name</span><span class="token operator">=</span>myWasmLib <span class="token parameter variable">--minify</span> glue.js
</code></pre></div><p>Browser <code>&lt;script&gt;</code>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>glue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  myWasmLib<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> Module <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Module<span class="token punctuation">;</span>
    Module<span class="token punctuation">.</span><span class="token function">myfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Webpack:</p><div class="language-js"><pre><code><span class="token keyword">import</span> init <span class="token keyword">from</span> <span class="token string">&#39;./glue.js&#39;</span>
<span class="token comment">// const init = require(&#39;./glue.js&#39;).default</span>
<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Module <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> Module<span class="token punctuation">.</span><span class="token function">myfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>CMake:</p><div class="language-cmake"><pre><code><span class="token keyword">add_custom_command</span><span class="token punctuation">(</span>TARGET yourtarget POST_BUILD
  COMMAND npx emwrap <span class="token string">&quot;--name=umdname&quot;</span> <span class="token string">&quot;$&lt;TARGET_FILE:yourtarget&gt;&quot;</span>
  <span class="token comment"># COMMAND node &quot;./other-script.js&quot;</span>
<span class="token punctuation">)</span>
</code></pre></div>`,27),e=[o];function c(u,l,i,r,k,d){return a(),s("div",null,e)}var f=n(p,[["render",c]]);export{g as __pageData,f as default};
