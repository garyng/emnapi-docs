import{_ as n,c as s,o as a,a as p}from"./app.9bc78407.js";const f='{"title":"\u6A21\u5757\u5316","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u8BBE\u7F6E MODULARIZE","slug":"\u8BBE\u7F6E-modularize"},{"level":2,"title":"\u4F7F\u7528 emwrap","slug":"\u4F7F\u7528-emwrap"}],"relativePath":"zh/guide/modularization.md","lastUpdated":1658482188000}',t={},o=p(`<h1 id="\u6A21\u5757\u5316" tabindex="-1">\u6A21\u5757\u5316 <a class="header-anchor" href="#\u6A21\u5757\u5316" aria-hidden="true">#</a></h1><p>\u9ED8\u8BA4\u60C5\u51B5\u4E0B\uFF0CEmscripten \u4EE5\u76F4\u63A5\u7684\u65B9\u5F0F\u5C06\u6240\u6709\u4EE3\u7801\u53D1\u9001\u5230\u8F93\u51FA\u5230 .js \u6587\u4EF6\u4E2D\u3002\u8FD9\u610F\u5473\u7740\u5982\u679C\u5728\u7F51\u9875\u7684\u811A\u672C\u6807\u7B7E\u4E2D\u52A0\u8F7D\u5B83\uFF0C\u5B83\u5C06\u4F7F\u7528\u5168\u5C40\u8303\u56F4\u3002</p><div class="language-js"><pre><code><span class="token comment">// \u8F93\u51FA\u7684 js</span>

<span class="token keyword">var</span> Module <span class="token operator">=</span> <span class="token keyword">typeof</span> Module <span class="token operator">!==</span> <span class="token string">&quot;undefined&quot;</span> <span class="token operator">?</span> Module <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// var ...</span>

<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="\u8BBE\u7F6E-modularize" tabindex="-1">\u8BBE\u7F6E <code>MODULARIZE</code> <a class="header-anchor" href="#\u8BBE\u7F6E-modularize" aria-hidden="true">#</a></h2><p>\u4F60\u53EF\u4EE5\u8BBE\u7F6E <code>-sMODULARIZE</code> \u548C <code>-sEXPORT_NAME=createModule</code> \u6765\u544A\u8BC9 Emscripten \u8F93\u51FA UMD \u6A21\u5757\uFF0C\u4EE3\u7801\u5305\u88C5\u5728\u8FD4\u56DE Promise \u7684\u5DE5\u5382\u51FD\u6570\u4E2D\u3002</p><div class="language-js"><pre><code><span class="token keyword">var</span> createModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> _scriptDir <span class="token operator">=</span> <span class="token keyword">typeof</span> document <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>currentScript <span class="token operator">?</span> document<span class="token punctuation">.</span>currentScript<span class="token punctuation">.</span>src <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> __filename <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> _scriptDir <span class="token operator">=</span> _scriptDir <span class="token operator">||</span> __filename<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">createModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  createModule <span class="token operator">=</span> createModule <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> Module <span class="token operator">=</span> <span class="token keyword">typeof</span> createModule <span class="token operator">!==</span> <span class="token string">&quot;undefined&quot;</span> <span class="token operator">?</span> createModule <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

Module<span class="token punctuation">[</span><span class="token string">&quot;ready&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  readyPromiseResolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>
  readyPromiseReject <span class="token operator">=</span> reject<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> createModule<span class="token punctuation">.</span>ready<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span>
  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> createModule<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">[</span><span class="token string">&#39;amd&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> createModule<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span>
  exports<span class="token punctuation">[</span><span class="token string">&quot;createModule&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> createModule<span class="token punctuation">;</span>
</code></pre></div><p>\u8FD4\u56DE\u7684 Promise \u5728 wasm \u7F16\u8BD1\u5B8C\u6210\u65F6\u6210\u529F\u89E3\u6790 Module \u5BF9\u8C61\uFF0C\u7C7B\u4F3C\u4E8E <code>onRuntimeInitialized</code> \u56DE\u8C03\u3002\u4F7F\u7528 <code>-sMODULARIZE</code> \u65F6\u4E0D\u9700\u8981\u4F7F\u7528 <code>onRuntimeInitialized</code> \u56DE\u8C03\u3002</p><p>\u5DE5\u5382\u51FD\u6570\u63A5\u53D7 1 \u4E2A\u53C2\u6570\uFF0C\u4E00\u4E2A\u5177\u6709 Module \u9ED8\u8BA4\u503C\u7684\u5BF9\u8C61\uFF0C\u4F60\u53EF\u4EE5\u5728\u8FD9\u91CC\u8BBE\u7F6E emnapi \u8FD0\u884C\u65F6\u6216\u521D\u59CB\u5316\u56DE\u8C03\uFF1A</p><div class="language-js"><pre><code><span class="token function">createModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">emnapiRuntime</span><span class="token operator">:</span> window<span class="token punctuation">.</span>__emnapi_runtime__<span class="token punctuation">,</span>
  <span class="token function">onEmnapiInitialized</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> emnapiExports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">Module</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// access Module.emnapiExports</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// or</span>

<span class="token keyword">const</span> Module <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createModule</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">emnapiRuntime</span><span class="token operator">:</span> window<span class="token punctuation">.</span>__emnapi_runtime__<span class="token punctuation">,</span>
  <span class="token function-variable function">onEmnapiInitialized</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> emnapiExports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="\u4F7F\u7528-emwrap" tabindex="-1">\u4F7F\u7528 <code>emwrap</code> <a class="header-anchor" href="#\u4F7F\u7528-emwrap" aria-hidden="true">#</a></h2><p>\u6211\u505A\u4E86\u4E00\u4E2A\u53EB <a href="https://github.com/toyobayashi/emwrap" target="_blank" rel="noopener noreferrer">emwrap</a> \u7684 Node.js CLI \u5DE5\u5177\uFF0C\u53EF\u4EE5\u5B9E\u73B0\u66F4\u7075\u6D3B\u7684\u6A21\u5757\u5316\u3002</p><p>\u7279\u6027\uFF1A</p><ul><li>\u652F\u6301 UMD / CommonJS / ESM / Node.js ESM \u683C\u5F0F</li><li>\u652F\u6301\u5FAE\u4FE1\u5C0F\u7A0B\u5E8F\u4E2D\u7684 <code>WXWebAssembly</code></li><li>\u7F13\u5B58 Promise \u7ED3\u679C\uFF0C\u610F\u5473\u7740\u591A\u6B21\u8C03\u7528\u521D\u59CB\u5316\u51FD\u6570\u65F6\u53EA\u4F1A\u83B7\u53D6\u548C\u7F16\u8BD1\u4E00\u6B21 wasm</li></ul><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> -D @tybys/emwrap
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>\u4F7F\u7528 emwrap \u65F6\u5E94\u5F53\u907F\u514D\u5C06 <code>-sMODULARIZE=1</code> \u6216 <code>-o .mjs</code> \u540E\u7F00\u4F20\u7ED9 emcc / em++\u3002</p></div><p>\u4F60\u53EF\u4EE5\u4F7F\u7528 <a href="https://emscripten.org/docs/tools_reference/emcc.html#emcc-minify" target="_blank" rel="noopener noreferrer"><code>--js-transform</code></a> \u9009\u9879\uFF1A</p><div class="language-bash"><pre><code>emcc -o glue.js -O3 --js-transform <span class="token string">&quot;emwrap --name=myWasmLib&quot;</span> main.c
</code></pre></div><p>Windows:</p><div class="language-bat"><pre><code>emcc -o glue.js -O3 --js-transform &quot;emwrap.cmd --name=myWasmLib&quot; main.c
</code></pre></div><p>\u6216\u5206\u6210\u4E24\u4E2A\u6B65\u9AA4\uFF1A</p><div class="language-bash"><pre><code>emcc -o glue.js -O3 main.c
emwrap --name<span class="token operator">=</span>myWasmLib --minify glue.js
</code></pre></div><p>\u6D4F\u89C8\u5668 <code>&lt;script&gt;</code>:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>glue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  myWasmLib<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> Module <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Module<span class="token punctuation">;</span>
    Module<span class="token punctuation">.</span><span class="token function">myfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Webpack:</p><div class="language-js"><pre><code><span class="token keyword">import</span> init <span class="token keyword">from</span> <span class="token string">&#39;./glue.js&#39;</span>
<span class="token comment">// const init = require(&#39;./glue.js&#39;).default</span>
<span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> Module <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> Module<span class="token punctuation">.</span><span class="token function">myfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>CMake:</p><div class="language-cmake"><pre><code><span class="token keyword">add_custom_command</span><span class="token punctuation">(</span>TARGET yourtarget POST_BUILD
  COMMAND npx emwrap <span class="token string">&quot;--name=umdname&quot;</span> <span class="token string">&quot;$&lt;TARGET_FILE:yourtarget&gt;&quot;</span>
  <span class="token comment"># COMMAND node &quot;./other-script.js&quot;</span>
<span class="token punctuation">)</span>
</code></pre></div>`,27),e=[o];function c(u,l,i,r,k,d){return a(),s("div",null,e)}var g=n(t,[["render",c]]);export{f as __pageData,g as default};
