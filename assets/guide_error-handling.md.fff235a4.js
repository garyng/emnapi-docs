import{_ as n,o as a,c as s,a as e}from"./app.1acbcc36.js";const g='{"title":"Error handling","description":"","frontmatter":{},"headers":[{"level":2,"title":"Node-API","slug":"node-api"},{"level":3,"title":"Return Values","slug":"return-values"},{"level":3,"title":"Last Error Info","slug":"last-error-info"},{"level":3,"title":"Helper Macro","slug":"helper-macro"},{"level":2,"title":"node-addon-api","slug":"node-addon-api"},{"level":3,"title":"Handling Errors With C++ Exceptions","slug":"handling-errors-with-c-exceptions"},{"level":3,"title":"Examples with C++ exceptions enabled","slug":"examples-with-c-exceptions-enabled"},{"level":3,"title":"Handling Errors With Maybe Type and C++ Exceptions Disabled","slug":"handling-errors-with-maybe-type-and-c-exceptions-disabled"},{"level":3,"title":"Examples with Maybe Type and C++ exceptions disabled","slug":"examples-with-maybe-type-and-c-exceptions-disabled"},{"level":3,"title":"Handling Errors Without C++ Exceptions","slug":"handling-errors-without-c-exceptions"},{"level":3,"title":"Examples with C++ exceptions disabled","slug":"examples-with-c-exceptions-disabled"},{"level":3,"title":"Propagating a Node-API JS exception","slug":"propagating-a-node-api-js-exception-1"},{"level":3,"title":"Calling Node-API directly","slug":"calling-node-api-directly"}],"relativePath":"guide/error-handling.md","lastUpdated":1658586447000}',t={},o=e(`<h1 id="error-handling" tabindex="-1">Error handling <a class="header-anchor" href="#error-handling" aria-hidden="true">#</a></h1><p>The content of this section refers:</p><ul><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#error-handling" target="_blank" rel="noopener noreferrer">Node-API documentation</a></li><li><a href="https://github.com/nodejs/node-addon-api/blob/v5.0.0/doc/error_handling.md" target="_blank" rel="noopener noreferrer">node-addon-api documentation</a></li></ul><h2 id="node-api" tabindex="-1">Node-API <a class="header-anchor" href="#node-api" aria-hidden="true">#</a></h2><h3 id="return-values" tabindex="-1">Return Values <a class="header-anchor" href="#return-values" aria-hidden="true">#</a></h3><p>All of the Node-API functions share the same error handling pattern. The return type of all API functions is <code>napi_status</code>.</p><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
  napi_ok<span class="token punctuation">,</span>
  napi_invalid_arg<span class="token punctuation">,</span>
  napi_object_expected<span class="token punctuation">,</span>
  napi_string_expected<span class="token punctuation">,</span>
  napi_name_expected<span class="token punctuation">,</span>
  napi_function_expected<span class="token punctuation">,</span>
  napi_number_expected<span class="token punctuation">,</span>
  napi_boolean_expected<span class="token punctuation">,</span>
  napi_array_expected<span class="token punctuation">,</span>
  napi_generic_failure<span class="token punctuation">,</span>
  napi_pending_exception<span class="token punctuation">,</span>
  napi_cancelled<span class="token punctuation">,</span>
  napi_escape_called_twice<span class="token punctuation">,</span>
  napi_handle_scope_mismatch<span class="token punctuation">,</span>
  napi_callback_scope_mismatch<span class="token punctuation">,</span>
  napi_queue_full<span class="token punctuation">,</span>
  napi_closing<span class="token punctuation">,</span>
  napi_bigint_expected<span class="token punctuation">,</span>
  napi_date_expected<span class="token punctuation">,</span>
  napi_arraybuffer_expected<span class="token punctuation">,</span>
  napi_detachable_arraybuffer_expected<span class="token punctuation">,</span>
  napi_would_deadlock<span class="token punctuation">,</span>  <span class="token comment">/* unused */</span>
<span class="token punctuation">}</span> napi_status<span class="token punctuation">;</span>
</code></pre></div><p>The return value will be <code>napi_ok</code> if the request was successful and no uncaught JavaScript exception was thrown. If an error occurred <strong>AND</strong> an exception was thrown, the <code>napi_status</code> value for the error will be returned. If an exception was thrown, and no error occurred, <code>napi_pending_exception</code> will be returned.</p><p>In cases where a return value other than <code>napi_ok</code> or <code>napi_pending_exception</code> is returned, <code>napi_is_exception_pending</code> must be called to check if an exception is pending.</p><div class="language-c"><pre><code>napi_status <span class="token function">napi_is_exception_pending</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> bool<span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The <code>napi_status</code> return value provides a VM-independent representation of the error which occurred. In some cases it is useful to be able to get more detailed information, including a string representing the error as well as VM (engine)-specific information.</p><p>In order to retrieve this information <code>napi_get_last_error_info</code> is provided which returns a <code>napi_extended_error_info</code> structure.</p><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">napi_extended_error_info</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> error_message<span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> engine_reserved<span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> engine_error_code<span class="token punctuation">;</span>
  napi_status error_code<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><ul><li><code>error_message</code>: Textual representation of the error that occurred.</li><li><code>engine_reserved</code>: Opaque handle reserved for engine use only.</li><li><code>engine_error_code</code>: VM specific error code.</li><li><code>error_code</code>: Node-API status code for the last error.</li></ul><h3 id="last-error-info" tabindex="-1">Last Error Info <a class="header-anchor" href="#last-error-info" aria-hidden="true">#</a></h3><p><code>napi_get_last_error_info</code> returns the information for the last Node-API call that was made.</p><div class="language-c"><pre><code>napi_status
<span class="token function">napi_get_last_error_info</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span>
                         <span class="token keyword">const</span> napi_extended_error_info<span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li><code>[in] env</code>: The environment that the API is invoked under.</li><li><code>[out] result</code>: The napi_extended_error_info structure with more information about the error.</li></ul><p>This API retrieves a <code>napi_extended_error_info</code> structure with information about the last error that occurred.</p><p>The content of the <code>napi_extended_error_info</code> returned is only valid up until a Node-API function is called on the same env. This includes a call to <code>napi_is_exception_pending</code> so it may often be necessary to make a copy of the information so that it can be used later. The pointer returned in <code>error_message</code> points to a statically-defined string so it is safe to use that pointer if you have copied it out of the <code>error_message</code> field (which will be overwritten) before another Node-API function was called.</p><p>This API can be called even if there is a pending JavaScript exception.</p><h3 id="helper-macro" tabindex="-1">Helper Macro <a class="header-anchor" href="#helper-macro" aria-hidden="true">#</a></h3><p>That is why you can see that the <code>NAPI_CALL</code> macro is defined in the hello world example.</p><div class="language-c"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br></div><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NAPI_CALL</span><span class="token expression"><span class="token punctuation">(</span>env<span class="token punctuation">,</span> the_call<span class="token punctuation">)</span>                                </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span>                                                          </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>the_call<span class="token punctuation">)</span> <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                </span><span class="token punctuation">\\</span>
      <span class="token expression"><span class="token keyword">const</span> napi_extended_error_info <span class="token operator">*</span>error_info<span class="token punctuation">;</span>               </span><span class="token punctuation">\\</span>
      <span class="token expression"><span class="token function">napi_get_last_error_info</span><span class="token punctuation">(</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>error_info<span class="token punctuation">)</span><span class="token punctuation">;</span>             </span><span class="token punctuation">\\</span>
      <span class="token expression">bool is_pending<span class="token punctuation">;</span>                                          </span><span class="token punctuation">\\</span>
      <span class="token expression"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> err_message <span class="token operator">=</span> error_info<span class="token operator">-&gt;</span>error_message<span class="token punctuation">;</span>      </span><span class="token punctuation">\\</span>
      <span class="token expression"><span class="token function">napi_is_exception_pending</span><span class="token punctuation">(</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>is_pending<span class="token punctuation">)</span><span class="token punctuation">;</span>            </span><span class="token punctuation">\\</span>
      <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> error_message <span class="token operator">=</span> err_message <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">?</span>       </span><span class="token punctuation">\\</span>
          <span class="token expression">err_message <span class="token operator">:</span>                                         </span><span class="token punctuation">\\</span>
          <span class="token string">&quot;empty error message&quot;</span><span class="token expression"><span class="token punctuation">;</span>                                </span><span class="token punctuation">\\</span>
        <span class="token expression"><span class="token function">napi_throw_error</span><span class="token punctuation">(</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> error_message<span class="token punctuation">)</span><span class="token punctuation">;</span>           </span><span class="token punctuation">\\</span>
      <span class="token expression"><span class="token punctuation">}</span>                                                         </span><span class="token punctuation">\\</span>
      <span class="token expression"><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                                              </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">}</span>                                                           </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>

napi_value <span class="token function">js_function</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_create_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> str<span class="token punctuation">,</span> str_len<span class="token punctuation">,</span> <span class="token operator">&amp;</span>world<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token function">NAPI_MODULE_INIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  napi_value hello<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_create_function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> NAPI_AUTO_LENGTH<span class="token punctuation">,</span>
                                      js_hello<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hello<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_set_named_property</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="node-addon-api" tabindex="-1">node-addon-api <a class="header-anchor" href="#node-addon-api" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You <strong>can not</strong> use node-addon-api if the runtime does not support <code>FinalizationRegistry</code> and <code>WeakRef</code>.</p></div><p>C++ exception is disabled by Emscripten default, but node-addon-api use C++ exceptions by default.</p><p>To enable C++ exception, you should use <code>-sDISABLE_EXCEPTION_CATCHING=0</code>.</p><p>To tell node-addon-api disable C++ exception, you should predefine <code>NAPI_DISABLE_CPP_EXCEPTIONS</code>.</p><p>The <code>Napi::Error</code> is a persistent reference to a JavaScript error object. Use of this class depends on whether C++ exceptions are enabled at compile time.</p><p>If C++ exceptions are enabled, then the <code>Napi::Error</code> class extends <code>std::exception</code> and enables integrated error-handling for C++ exceptions and JavaScript exceptions.</p><p>The following sections explain the approach for each case:</p><ul><li><a href="#handling-errors-with-c-exceptions">Handling Errors With C++ Exceptions</a></li><li><a href="#handling-errors-with-maybe-type-and-c-exceptions-disabled">Handling Errors With Maybe Type and C++ Exceptions Disabled</a></li><li><a href="#handling-errors-without-c-exceptions">Handling Errors Without C++ Exceptions</a></li></ul><p>In most cases when an error occurs, the native code should do whatever cleanup is possible and then return to JavaScript so that the error can be propagated. In less frequent cases the native code may be able to recover from the error, clear the error and then continue.</p><h3 id="handling-errors-with-c-exceptions" tabindex="-1">Handling Errors With C++ Exceptions <a class="header-anchor" href="#handling-errors-with-c-exceptions" aria-hidden="true">#</a></h3><p>When C++ exceptions are enabled try/catch can be used to catch exceptions thrown from calls to JavaScript and then they can either be handled or rethrown before returning from a native method.</p><p>If a node-addon-api call fails without executing any JavaScript code (for example due to an invalid argument), then node-addon-api automatically converts and throws the error as a C++ exception of type <code>Napi::Error</code>.</p><p>If a JavaScript function called by C++ code via node-addon-api throws a JavaScript exception, then node-addon-api automatically converts and throws it as a C++ exception of type <code>Napi::Error</code> on return from the JavaScript code to the native method.</p><p>If a C++ exception of type <code>Napi::Error</code> escapes from a Node-API C++ callback, then the Node-API wrapper automatically converts and throws it as a JavaScript exception.</p><p>On return from a native method, node-addon-api will automatically convert a pending C++ exception to a JavaScript exception.</p><h3 id="examples-with-c-exceptions-enabled" tabindex="-1">Examples with C++ exceptions enabled <a class="header-anchor" href="#examples-with-c-exceptions-enabled" aria-hidden="true">#</a></h3><h4 id="throwing-a-c-exception" tabindex="-1">Throwing a C++ exception <a class="header-anchor" href="#throwing-a-c-exception" aria-hidden="true">#</a></h4><div class="language-cpp"><pre><code>Env env <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">throw</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">Error</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Example exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// other C++ statements</span>
<span class="token comment">// ...</span>
</code></pre></div><p>The statements following the throw statement will not be executed. The exception will bubble up as a C++ exception of type <code>Napi::Error</code>, until it is either caught while still in C++, or else automatically propagated as a JavaScript exception when returning to JavaScript.</p><h4 id="propagating-a-node-api-c-exception" tabindex="-1">Propagating a Node-API C++ exception <a class="header-anchor" href="#propagating-a-node-api-c-exception" aria-hidden="true">#</a></h4><div class="language-cpp"><pre><code>Napi<span class="token double-colon punctuation">::</span>Function jsFunctionThatThrows <span class="token operator">=</span> someValue<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Function<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Napi<span class="token double-colon punctuation">::</span>Value result <span class="token operator">=</span> <span class="token function">jsFunctionThatThrows</span><span class="token punctuation">(</span><span class="token punctuation">{</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// other C++ statements</span>
<span class="token comment">// ...</span>
</code></pre></div><p>The C++ statements following the call to the JavaScript function will not be executed. The exception will bubble up as a C++ exception of type <code>Napi::Error</code>, until it is either caught while still in C++, or else automatically propagated as a JavaScript exception when returning to JavaScript.</p><h4 id="handling-a-node-api-c-exception" tabindex="-1">Handling a Node-API C++ exception <a class="header-anchor" href="#handling-a-node-api-c-exception" aria-hidden="true">#</a></h4><div class="language-cpp"><pre><code>Napi<span class="token double-colon punctuation">::</span>Function jsFunctionThatThrows <span class="token operator">=</span> someValue<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Function<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Napi<span class="token double-colon punctuation">::</span>Value result<span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token function">jsFunctionThatThrows</span><span class="token punctuation">(</span><span class="token punctuation">{</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>Error<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Caught JavaScript exception: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Since the exception was caught here, it will not be propagated as a JavaScript exception.</p><h3 id="handling-errors-with-maybe-type-and-c-exceptions-disabled" tabindex="-1">Handling Errors With Maybe Type and C++ Exceptions Disabled <a class="header-anchor" href="#handling-errors-with-maybe-type-and-c-exceptions-disabled" aria-hidden="true">#</a></h3><p>If you decide to use node-addon-api without C++ exceptions enabled, please consider enabling node-addon-api safe API type guards by predefining <code>NODE_ADDON_API_ENABLE_MAYBE</code> to ensure the proper exception handling pattern.</p><p>If C++ exceptions are disabled, then the <code>Napi::Error</code> class does not extend <code>std::exception</code>. This means that any calls to node-addon-api functions do not throw a C++ exceptions. Instead, these node-api functions that call into JavaScript are returning with <code>Maybe</code> boxed values. In that case, the calling side should convert the <code>Maybe</code> boxed values with checks to ensure that the call did succeed and therefore no exception is pending. If the check fails, that is to say, the returning value is <em>empty</em>, the calling side should determine what to do with <code>env.GetAndClearPendingException()</code> before attempting to call another node-api.</p><p>The conversion from the <code>Maybe</code> boxed value to the actual return value is enforced by compilers so that the exceptions must be properly handled before continuing.</p><h3 id="examples-with-maybe-type-and-c-exceptions-disabled" tabindex="-1">Examples with Maybe Type and C++ exceptions disabled <a class="header-anchor" href="#examples-with-maybe-type-and-c-exceptions-disabled" aria-hidden="true">#</a></h3><h4 id="throwing-a-js-exception" tabindex="-1">Throwing a JS exception <a class="header-anchor" href="#throwing-a-js-exception" aria-hidden="true">#</a></h4><div class="language-cpp"><pre><code>Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Napi<span class="token double-colon punctuation">::</span><span class="token class-name">Error</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Example exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThrowAsJavaScriptException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span>
</code></pre></div><p>After throwing a JavaScript exception, the code should generally return immediately from the native callback, after performing any necessary cleanup.</p><h4 id="propagating-a-node-api-js-exception" tabindex="-1">Propagating a Node-API JS exception <a class="header-anchor" href="#propagating-a-node-api-js-exception" aria-hidden="true">#</a></h4><div class="language-cpp"><pre><code>Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Napi<span class="token double-colon punctuation">::</span>Function jsFunctionThatThrows <span class="token operator">=</span> someValue<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Function<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Maybe<span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Value<span class="token operator">&gt;</span> maybeResult <span class="token operator">=</span> <span class="token function">jsFunctionThatThrows</span><span class="token punctuation">(</span><span class="token punctuation">{</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Napi<span class="token double-colon punctuation">::</span>Value result<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>maybeResult<span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// The Maybe is empty, calling into js failed, cleaning up...</span>
    <span class="token comment">// It is recommended to return an empty Maybe if the procedure failed.</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>If <code>maybeResult.To(&amp;result)</code> returns false a JavaScript exception is pending. To let the exception propagate, the code should generally return immediately from the native callback, after performing any necessary cleanup.</p><h4 id="handling-a-node-api-js-exception" tabindex="-1">Handling a Node-API JS exception <a class="header-anchor" href="#handling-a-node-api-js-exception" aria-hidden="true">#</a></h4><div class="language-cpp"><pre><code>Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Napi<span class="token double-colon punctuation">::</span>Function jsFunctionThatThrows <span class="token operator">=</span> someValue<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Function<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Maybe<span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Value<span class="token operator">&gt;</span> maybeResult <span class="token operator">=</span> <span class="token function">jsFunctionThatThrows</span><span class="token punctuation">(</span><span class="token punctuation">{</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>maybeResult<span class="token punctuation">.</span><span class="token function">IsNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>Error e <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">GetAndClearPendingException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Caught JavaScript exception: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Since the exception was cleared here, it will not be propagated as a JavaScript exception after the native callback returns.</p><h3 id="handling-errors-without-c-exceptions" tabindex="-1">Handling Errors Without C++ Exceptions <a class="header-anchor" href="#handling-errors-without-c-exceptions" aria-hidden="true">#</a></h3><p>If C++ exceptions are disabled, then the <code>Napi::Error</code> class does not extend <code>std::exception</code>. This means that any calls to node-addon-api function do not throw a C++ exceptions. Instead, it raises <em>pending</em> JavaScript exceptions and returns an <em>empty</em> <code>Napi::Value</code>. The calling code should check <code>env.IsExceptionPending()</code> before attempting to use a returned value, and may use methods on the <code>Napi::Env</code> class to check for, get, and clear a pending JavaScript exception. If the pending exception is not cleared, it will be thrown when the native code returns to JavaScript.</p><h3 id="examples-with-c-exceptions-disabled" tabindex="-1">Examples with C++ exceptions disabled <a class="header-anchor" href="#examples-with-c-exceptions-disabled" aria-hidden="true">#</a></h3><h4 id="throwing-a-js-exception-1" tabindex="-1">Throwing a JS exception <a class="header-anchor" href="#throwing-a-js-exception-1" aria-hidden="true">#</a></h4><div class="language-cpp"><pre><code>Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Napi<span class="token double-colon punctuation">::</span><span class="token class-name">Error</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Example exception&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThrowAsJavaScriptException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span><span class="token punctuation">;</span>
</code></pre></div><p>After throwing a JavaScript exception, the code should generally return immediately from the native callback, after performing any necessary cleanup.</p><h3 id="propagating-a-node-api-js-exception-1" tabindex="-1">Propagating a Node-API JS exception <a class="header-anchor" href="#propagating-a-node-api-js-exception-1" aria-hidden="true">#</a></h3><div class="language-cpp"><pre><code>Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Napi<span class="token double-colon punctuation">::</span>Function jsFunctionThatThrows <span class="token operator">=</span> someValue<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Function<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Napi<span class="token double-colon punctuation">::</span>Value result <span class="token operator">=</span> <span class="token function">jsFunctionThatThrows</span><span class="token punctuation">(</span><span class="token punctuation">{</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsExceptionPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Error e <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">GetAndClearPendingException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>If <code>env.IsExceptionPending()</code> returns true a JavaScript exception is pending. To let the exception propagate, the code should generally return immediately from the native callback, after performing any necessary cleanup.</p><h4 id="handling-a-node-api-js-exception-1" tabindex="-1">Handling a Node-API JS exception <a class="header-anchor" href="#handling-a-node-api-js-exception-1" aria-hidden="true">#</a></h4><div class="language-cpp"><pre><code>Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Napi<span class="token double-colon punctuation">::</span>Function jsFunctionThatThrows <span class="token operator">=</span> someValue<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Function<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Napi<span class="token double-colon punctuation">::</span>Value result <span class="token operator">=</span> <span class="token function">jsFunctionThatThrows</span><span class="token punctuation">(</span><span class="token punctuation">{</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsExceptionPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>Error e <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">GetAndClearPendingException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Caught JavaScript exception: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Since the exception was cleared here, it will not be propagated as a JavaScript exception after the native callback returns.</p><h3 id="calling-node-api-directly" tabindex="-1">Calling Node-API directly <a class="header-anchor" href="#calling-node-api-directly" aria-hidden="true">#</a></h3><p><strong>node-addon-api</strong> provides macros for throwing errors in response to non-OK <code>napi_status</code> results when calling Node-API functions. These macros are defined differently depending on whether C++ exceptions are enabled or not, but are available for use in either case.</p><h4 id="napi-throw-e" tabindex="-1"><code>NAPI_THROW(e, ...)</code> <a class="header-anchor" href="#napi-throw-e" aria-hidden="true">#</a></h4><p>This macro accepts a <code>Napi::Error</code>, throws it, and returns the value given as the last parameter. If C++ exceptions are enabled (by defining <code>NAPI_CPP_EXCEPTIONS</code> during the build), the return value will be ignored.</p><h4 id="napi-throw-if-failed-env-status" tabindex="-1"><code>NAPI_THROW_IF_FAILED(env, status, ...)</code> <a class="header-anchor" href="#napi-throw-if-failed-env-status" aria-hidden="true">#</a></h4><p>This macro accepts a <code>Napi::Env</code> and a <code>napi_status</code>. It constructs an error from the <code>napi_status</code>, throws it, and returns the value given as the last parameter. If C++ exceptions are enabled (by defining <code>NAPI_CPP_EXCEPTIONS</code> during the build), the return value will be ignored.</p><h4 id="napi-throw-if-failed-void-env-status" tabindex="-1"><code>NAPI_THROW_IF_FAILED_VOID(env, status)</code> <a class="header-anchor" href="#napi-throw-if-failed-void-env-status" aria-hidden="true">#</a></h4><p>This macro accepts a <code>Napi::Env</code> and a <code>napi_status</code>. It constructs an error from the <code>napi_status</code>, throws it, and returns.</p><h4 id="napi-fatal-if-failed-status-location-message" tabindex="-1"><code>NAPI_FATAL_IF_FAILED(status, location, message)</code> <a class="header-anchor" href="#napi-fatal-if-failed-status-location-message" aria-hidden="true">#</a></h4><p>This macro accepts a <code>napi_status</code>, a C string indicating the location where the error occurred, and a second C string for the message to display.</p>`,86),p=[o];function c(i,r,l,u,d,k){return a(),s("div",null,p)}var f=n(t,[["render",c]]);export{g as __pageData,f as default};
