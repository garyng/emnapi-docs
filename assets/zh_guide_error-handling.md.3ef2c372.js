import{_ as s,o as a,c as n,a as p}from"./app.58384371.js";const A=JSON.parse('{"title":"错误处理","description":"","frontmatter":{},"headers":[{"level":2,"title":"Node-API","slug":"node-api","link":"#node-api","children":[{"level":3,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":3,"title":"最后一次的错误信息","slug":"最后一次的错误信息","link":"#最后一次的错误信息","children":[]},{"level":3,"title":"辅助宏","slug":"辅助宏","link":"#辅助宏","children":[]}]},{"level":2,"title":"node-addon-api","slug":"node-addon-api","link":"#node-addon-api","children":[{"level":3,"title":"在启用 C++ 异常的情况下处理错误","slug":"在启用-c-异常的情况下处理错误","link":"#在启用-c-异常的情况下处理错误","children":[]},{"level":3,"title":"启用 C++ 异常的例子","slug":"启用-c-异常的例子","link":"#启用-c-异常的例子","children":[]},{"level":3,"title":"在禁用 C++ 异常的情况下使用 Maybe 类型处理错误","slug":"在禁用-c-异常的情况下使用-maybe-类型处理错误","link":"#在禁用-c-异常的情况下使用-maybe-类型处理错误","children":[]},{"level":3,"title":"禁用 C++ 异常并使用 Maybe 类型的例子","slug":"禁用-c-异常并使用-maybe-类型的例子","link":"#禁用-c-异常并使用-maybe-类型的例子","children":[]},{"level":3,"title":"在禁用 C++ 异常的情况下处理错误","slug":"在禁用-c-异常的情况下处理错误","link":"#在禁用-c-异常的情况下处理错误","children":[]},{"level":3,"title":"禁用 C++ 异常的例子","slug":"禁用-c-异常的例子","link":"#禁用-c-异常的例子","children":[]},{"level":3,"title":"传播 Node-API JS 异常","slug":"传播-node-api-js-异常-1","link":"#传播-node-api-js-异常-1","children":[]},{"level":3,"title":"直接从调用 Node-API","slug":"直接从调用-node-api","link":"#直接从调用-node-api","children":[]}]}],"relativePath":"zh/guide/error-handling.md","lastUpdated":1676357086000}'),l={name:"zh/guide/error-handling.md"},o=p(`<h1 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-hidden="true">#</a></h1><p>本节内容参考：</p><ul><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#error-handling" target="_blank" rel="noreferrer">Node-API 文档</a></li><li><a href="https://github.com/nodejs/node-addon-api/blob/v5.0.0/doc/error_handling.md" target="_blank" rel="noreferrer">node-addon-api 文档</a></li></ul><h2 id="node-api" tabindex="-1">Node-API <a class="header-anchor" href="#node-api" aria-hidden="true">#</a></h2><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-hidden="true">#</a></h3><p>所有 Node-API 函数共享相同的错误处理模式。所有 API 函数的返回类型都是 <code>napi_status</code>。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  napi_ok</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_invalid_arg</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_object_expected</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_string_expected</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_name_expected</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_function_expected</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_number_expected</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_boolean_expected</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_array_expected</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_generic_failure</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_pending_exception</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_cancelled</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_escape_called_twice</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_handle_scope_mismatch</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_callback_scope_mismatch</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_queue_full</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_closing</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_bigint_expected</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_date_expected</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_arraybuffer_expected</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_detachable_arraybuffer_expected</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  napi_would_deadlock</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">  /* unused */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> napi_status</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>如果请求成功并且没有抛出未捕获的 JavaScript 异常，则返回值将为 <code>napi_ok</code>。如果发生错误<strong>并</strong>抛出异常，则将返回错误的 <code>napi_status</code> 值。如果抛出异常并且没有发生错误，则将返回 <code>napi_pending_exception</code>。</p><p>在返回 <code>napi_ok</code> 或 <code>napi_pending_exception</code> 以外的返回值的情况下，必须调用 <code>napi_is_exception_pending</code> 来检查是否存在异常未处理。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">napi_status </span><span style="color:#82AAFF;">napi_is_exception_pending</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">napi_env </span><span style="color:#A6ACCD;font-style:italic;">env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p><code>napi_status</code> 返回值提供了与 VM 无关的错误表示。在某些情况下，能够获取更详细的信息很有用，包括表示错误的字符串以及特定于 VM（引擎）的信息。</p><p><code>napi_get_last_error_info</code> 用于接收此信息，它返回一个 <code>napi_extended_error_info</code> 结构。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> napi_extended_error_info </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> error_message</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> engine_reserved</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> engine_error_code</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  napi_status error_code</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><ul><li><code>error_message</code>：发生的错误的文本表示。</li><li><code>engine_reserved</code>：保留仅供引擎使用的不透明指针。</li><li><code>engine_error_code</code>：VM 特定的错误代码。</li><li><code>error_code</code>：Node-API 最后一个错误的状态代码。</li></ul><h3 id="最后一次的错误信息" tabindex="-1">最后一次的错误信息 <a class="header-anchor" href="#最后一次的错误信息" aria-hidden="true">#</a></h3><p><code>napi_get_last_error_info</code> 返回最后一次 Node-API 调用的信息。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">napi_status</span></span>
<span class="line"><span style="color:#82AAFF;">napi_get_last_error_info</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">napi_env </span><span style="color:#A6ACCD;font-style:italic;">env</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                         </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> napi_extended_error_info</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">result</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><ul><li><code>[in] env</code>: 调用 API 的环境。</li><li><code>[out] result</code>: napi_extended_error_info 结构，包含有关错误的更多信息。</li></ul><p>此 API 检索 <code>napi_extended_error_info</code> 结构，其中包含有关发生的最后一个错误的信息。</p><p>返回的 <code>napi_extended_error_info</code> 的内容仅在同一环境上调用 Node-API 函数之前有效。这包括对 <code>napi_is_exception_pending</code> 的调用，因此可能经常需要复制信息以便以后使用。 <code>error_message</code> 中返回的指针指向一个静态定义的字符串，因此如果在调用另一个 Node-API 函数之前将它从 <code>error_message</code> 字段（将被覆盖）中复制出来，那么使用该指针是安全的。</p><p>即使存在未处理的 JavaScript 异常，也可以调用此 API。</p><h3 id="辅助宏" tabindex="-1">辅助宏 <a class="header-anchor" href="#辅助宏" aria-hidden="true">#</a></h3><p>这就是为什么可以看到在 hello world 示例中定义了 <code>NAPI_CALL</code> 宏。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NAPI_CALL</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">the_call</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">                                \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">                                                          </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">((</span><span style="color:#F07178;">the_call</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> napi_ok</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">                                </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> napi_extended_error_info </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">error_info</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">               </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">napi_get_last_error_info</span><span style="color:#89DDFF;">((</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">error_info</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;">             </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> is_pending</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">                                          </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> err_message </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">error_info</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">error_message</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">napi_is_exception_pending</span><span style="color:#89DDFF;">((</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">is_pending</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#F07178;">is_pending</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">                                        </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> error_message </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> err_message </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;">       </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">          err_message </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">                                         </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">empty error message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">                                </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">napi_throw_error</span><span style="color:#89DDFF;">((</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#F07178;"> error_message</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;">           </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">                                                         </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL;</span><span style="color:#F07178;">                                              </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">                                                           </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">napi_value </span><span style="color:#82AAFF;">js_function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">napi_env </span><span style="color:#A6ACCD;font-style:italic;">env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> napi_callback_info </span><span style="color:#A6ACCD;font-style:italic;">info</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NAPI_CALL</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">napi_create_string_utf8</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> str</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> str_len</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">world</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">NAPI_MODULE_INIT</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  napi_value hello</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NAPI_CALL</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">napi_create_function</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> NAPI_AUTO_LENGTH</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#F07178;">                                      js_hello</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">NULL,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">hello</span><span style="color:#89DDFF;">));</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">NAPI_CALL</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">napi_set_named_property</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> hello</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> exports</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="node-addon-api" tabindex="-1">node-addon-api <a class="header-anchor" href="#node-addon-api" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果运行时不支持 <code>FinalizationRegistry</code> 和 <code>WeakRef</code>则<strong>不能</strong>使用 node-addon-api。</p></div><p>Emscripten 默认禁用 C++ 异常，但 node-addon-api 默认使用 C++ 异常。</p><p>要启用 C++ 异常，应该使用 <code>-sDISABLE_EXCEPTION_CATCHING=0</code>。</p><p>要告诉 node-addon-api 禁用 C++ 异常，应该预定义 <code>NAPI_DISABLE_CPP_EXCEPTIONS</code>。</p><p><code>Napi::Error</code> 是对 JavaScript 错误对象的持久引用。此类的使用方式取决于是否在编译时启用了 C++ 异常。</p><p>如果启用了 C++ 异常，则 <code>Napi::Error</code> 类继承 <code>std::exception</code> 并启用对 C++ 异常和 JavaScript 异常的集成错误处理。</p><p>以下部分解释了每种情况的做法：</p><ul><li><a href="#%E5%9C%A8%E5%90%AF%E7%94%A8-c-%E5%BC%82%E5%B8%B8%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF">在启用 C++ 异常的情况下处理错误</a></li><li><a href="#%E5%9C%A8%E7%A6%81%E7%94%A8-c-%E5%BC%82%E5%B8%B8%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%BD%BF%E7%94%A8-maybe-%E7%B1%BB%E5%9E%8B%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF">在禁用 C++ 异常的情况下使用 Maybe 类型处理错误</a></li><li><a href="#%E5%9C%A8%E7%A6%81%E7%94%A8-c-%E5%BC%82%E5%B8%B8%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF">在禁用 C++ 异常的情况下处理错误</a></li></ul><p>在大多数情况下，当发生错误时，原生代码应该做任何可能的清理工作，然后返回到 JavaScript 以便可以传播错误。 在不太常见的情况下，原生代码也许能够从错误中恢复，清除错误然后继续。</p><h3 id="在启用-c-异常的情况下处理错误" tabindex="-1">在启用 C++ 异常的情况下处理错误 <a class="header-anchor" href="#在启用-c-异常的情况下处理错误" aria-hidden="true">#</a></h3><p>当启用 C++ 异常时，try/catch 可用于捕获从调用 JavaScript 抛出的异常，然后可以在从原生函数返回之前对其进行处理或重新抛出。</p><p>如果 node-addon-api 调用失败而没有执行任何 JavaScript 代码（例如由于无效参数），则 node-addon-api 会自动转换并将错误作为 <code>Napi::Error</code> 类型的 C++ 异常抛出。</p><p>如果 C++ 代码通过 node-addon-api 调用的 JavaScript 函数抛出 JavaScript 异常，则 node-addon-api 在从 JavaScript 代码返回到原生函数时自动将其转换为 <code>Napi::Error</code> 类型的 C++ 异常并抛出。</p><p>如果 <code>Napi::Error</code> 类型的 C++ 异常从 Node-API C++ 回调中逃逸，则 Node-API 包装器会自动将其转换为 JavaScript 异常并将其抛出。</p><p>从原生函数返回时，node-addon-api 将自动将待处理的 C++ 异常转换为 JavaScript 异常。</p><h3 id="启用-c-异常的例子" tabindex="-1">启用 C++ 异常的例子 <a class="header-anchor" href="#启用-c-异常的例子" aria-hidden="true">#</a></h3><h4 id="抛出-c-异常" tabindex="-1">抛出 C++ 异常 <a class="header-anchor" href="#抛出-c-异常" aria-hidden="true">#</a></h4><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Env env </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Error</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Example exception</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 其他 C++ 语句</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span></code></pre></div><p>throw 语句后面的语句将不会被执行。该异常将作为 <code>Napi::Error</code> 类型的 C++ 异常冒泡，直到它在仍在C++ 中时被捕获，或者在返回 JavaScript 时作为JavaScript 异常自动传播。</p><h4 id="传播-node-api-c-异常" tabindex="-1">传播 Node-API C++ 异常 <a class="header-anchor" href="#传播-node-api-c-异常" aria-hidden="true">#</a></h4><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function jsFunctionThatThrows </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> someValue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">As</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Value result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">jsFunctionThatThrows</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">{ arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arg2 }</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 其他 C++ 语句</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span></code></pre></div><p>调用 JavaScript 函数之后的 C++ 语句将不会被执行。该异常将作为 <code>Napi::Error</code> 类型的 C++ 异常冒泡，直到它仍然在 C++ 中时被捕获，或者在返回 JavaScript 时作为 JavaScript 异常自动传播。</p><h4 id="处理-node-api-c-异常" tabindex="-1">处理 Node-API C++ 异常 <a class="header-anchor" href="#处理-node-api-c-异常" aria-hidden="true">#</a></h4><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function jsFunctionThatThrows </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> someValue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">As</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Value result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">jsFunctionThatThrows</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">{ arg1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> arg2 }</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Error</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    cerr </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Caught JavaScript exception: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">what</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>由于在此处捕获了异常，因此不会将其作为 JavaScript 异常传播。</p><h3 id="在禁用-c-异常的情况下使用-maybe-类型处理错误" tabindex="-1">在禁用 C++ 异常的情况下使用 Maybe 类型处理错误 <a class="header-anchor" href="#在禁用-c-异常的情况下使用-maybe-类型处理错误" aria-hidden="true">#</a></h3><p>如果你决定在未启用 C++ 异常的情况下使用 node-addon-api，请考虑通过预定义 <code>NODE_ADDON_API_ENABLE_MAYBE</code> 来启用 node-addon-api 安全 API 类型保护，以确保正确的异常处理模式。</p><p>如果禁用 C++ 异常，则 <code>Napi::Error</code> 类不会继承 <code>std::exception</code>。这意味着对 node-addon-api 函数的任何调用都不会抛出 C++ 异常。相反，这些调用 JavaScript 的 node-api 函数返回的是 <code>Maybe</code> 装箱的值。在这种情况下，调用方应该通过检查转换 <code>Maybe</code> 装箱的值，以确保调用确实成功且没有异常未处理。如果检查失败，即返回值为<em>空</em>，调用方应在尝试调用另一个 node-api 之前确定如何处理 <code>env.GetAndClearPendingException()</code>。</p><p>从 <code>Maybe</code> 装箱值到实际返回值的转换由编译器强制执行，因此在继续之前必须正确处理异常。</p><h3 id="禁用-c-异常并使用-maybe-类型的例子" tabindex="-1">禁用 C++ 异常并使用 Maybe 类型的例子 <a class="header-anchor" href="#禁用-c-异常并使用-maybe-类型的例子" aria-hidden="true">#</a></h3><h4 id="抛出-js-异常" tabindex="-1">抛出 JS 异常 <a class="header-anchor" href="#抛出-js-异常" aria-hidden="true">#</a></h4><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Env env </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Error</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Example exception</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ThrowAsJavaScriptException</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>抛出 JavaScript 异常后，代码通常应在执行任何必要的清理后立即从原生回调中返回。</p><h4 id="传播-node-api-js-异常" tabindex="-1">传播 Node-API JS 异常 <a class="header-anchor" href="#传播-node-api-js-异常" aria-hidden="true">#</a></h4><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Env env </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function jsFunctionThatThrows </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> someValue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">As</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">Maybe</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> maybeResult </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">jsFunctionThatThrows</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">{ arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arg2 }</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Value result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">maybeResult</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">To</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Maybe 是空的，调用 JS 失败，清理 ...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 建议返回一个空的 Maybe。</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如果 <code>maybeResult.To(&amp;result)</code> 返回 false，则 JavaScript 异常处于未处理状态。 为了让异常传播，代码通常应该在执行任何必要的清理之后立即从原生回调中返回。</p><h4 id="处理-node-api-js-异常" tabindex="-1">处理 Node-API JS 异常 <a class="header-anchor" href="#处理-node-api-js-异常" aria-hidden="true">#</a></h4><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Env env </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function jsFunctionThatThrows </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> someValue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">As</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">Maybe</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> maybeResult </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">jsFunctionThatThrows</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">{ arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arg2 }</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">maybeResult</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsNothing</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Error e </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetAndClearPendingException</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    cerr </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Caught JavaScript exception: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Message</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>由于这里清除了异常，所以在原生回调返回后不会作为 JavaScript 异常传播。</p><h3 id="在禁用-c-异常的情况下处理错误" tabindex="-1">在禁用 C++ 异常的情况下处理错误 <a class="header-anchor" href="#在禁用-c-异常的情况下处理错误" aria-hidden="true">#</a></h3><p>如果禁用 C++ 异常，则 <code>Napi::Error</code> 类不会继承 <code>std::exception</code>。这意味着对 node-addon-api 函数的任何调用都不会抛出 C++ 异常。相反，它会引发<em>待处理</em>的 JavaScript 异常并返回一个<em>空</em>的 <code>Napi::Value</code>。调用代码应该在尝试使用返回值之前检查 <code>env.IsExceptionPending()</code>，并且可以使用 <code>Napi::Env</code> 类上的方法来检查、获取和清除未处理的 JavaScript 异常。如果未清除未处理的异常，将在原生代码返回 JavaScript 时抛出。</p><h3 id="禁用-c-异常的例子" tabindex="-1">禁用 C++ 异常的例子 <a class="header-anchor" href="#禁用-c-异常的例子" aria-hidden="true">#</a></h3><h4 id="抛出-js-异常-1" tabindex="-1">抛出 JS 异常 <a class="header-anchor" href="#抛出-js-异常-1" aria-hidden="true">#</a></h4><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Env env </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Error</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">New</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Example exception</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ThrowAsJavaScriptException</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>抛出 JavaScript 异常后，代码通常应在执行任何必要的清理后立即从原生回调返回。</p><h3 id="传播-node-api-js-异常-1" tabindex="-1">传播 Node-API JS 异常 <a class="header-anchor" href="#传播-node-api-js-异常-1" aria-hidden="true">#</a></h3><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Env env </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function jsFunctionThatThrows </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> someValue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">As</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Value result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">jsFunctionThatThrows</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">{ arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arg2 }</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsExceptionPending</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    Error e </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetAndClearPendingException</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Value</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如果 <code>env.IsExceptionPending()</code> 返回 true，则 JavaScript 异常处于未处理状态。为了让异常传播，代码通常应该在执行任何必要的清理之后立即从原生回调返回。</p><h4 id="处理-node-api-js-异常-1" tabindex="-1">处理 Node-API JS 异常 <a class="header-anchor" href="#处理-node-api-js-异常-1" aria-hidden="true">#</a></h4><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Env env </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function jsFunctionThatThrows </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> someValue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">As</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">Value result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">jsFunctionThatThrows</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">{ arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arg2 }</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsExceptionPending</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">Napi</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">Error e </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetAndClearPendingException</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    cerr </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Caught JavaScript exception: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Message</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>由于这里清除了异常，所以在原生回调返回后不会作为 JavaScript 异常传播。</p><h3 id="直接从调用-node-api" tabindex="-1">直接从调用 Node-API <a class="header-anchor" href="#直接从调用-node-api" aria-hidden="true">#</a></h3><p><strong>node-addon-api</strong> 提供了在调用 Node-API 函数时抛出错误以响应非 OK <code>napi_status</code> 结果的宏。 根据是否启用 C++ 异常，这些宏的定义不同，但在任何一种情况下都可以使用。</p><h4 id="napi-throw-e" tabindex="-1"><code>NAPI_THROW(e, ...)</code> <a class="header-anchor" href="#napi-throw-e" aria-hidden="true">#</a></h4><p>这个宏接受一个 <code>Napi::Error</code> 并抛出，返回最后一个参数给出的值。如果启用了 C++ 异常（通过在构建期间定义 <code>NAPI_CPP_EXCEPTIONS</code>），则返回值将被忽略。</p><h4 id="napi-throw-if-failed-env-status" tabindex="-1"><code>NAPI_THROW_IF_FAILED(env, status, ...)</code> <a class="header-anchor" href="#napi-throw-if-failed-env-status" aria-hidden="true">#</a></h4><p>这个宏接受一个 <code>Napi::Env</code> 和一个 <code>napi_status</code>。它从 <code>napi_status</code> 构造一个错误并抛出，返回最后一个参数给出的值。如果启用了 C++ 异常（通过在构建期间定义 <code>NAPI_CPP_EXCEPTIONS</code>），则返回值将被忽略。</p><h4 id="napi-throw-if-failed-void-env-status" tabindex="-1"><code>NAPI_THROW_IF_FAILED_VOID(env, status)</code> <a class="header-anchor" href="#napi-throw-if-failed-void-env-status" aria-hidden="true">#</a></h4><p>这个宏接受一个 <code>Napi::Env</code> 和一个 <code>napi_status</code>。它从 <code>napi_status</code> 构造一个错误并抛出，然后返回。</p><h4 id="napi-fatal-if-failed-status-location-message" tabindex="-1"><code>NAPI_FATAL_IF_FAILED(status, location, message)</code> <a class="header-anchor" href="#napi-fatal-if-failed-status-location-message" aria-hidden="true">#</a></h4><p>此宏接受一个 <code>napi_status</code>、一个指示错误发生位置的 C 字符串，以及用于显示消息的第二个 C 字符串。</p>`,86),e=[o];function c(t,r,F,i,y,D){return a(),n("div",null,e)}const C=s(l,[["render",c]]);export{A as __pageData,C as default};
