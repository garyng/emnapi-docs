import{_ as n,o as s,c as a,a as p}from"./app.ac372f24.js";const _='{"title":"\u591A\u7EBF\u7A0B\u5F02\u6B65","description":"","frontmatter":{},"headers":[{"level":2,"title":"Node-API \u5B9E\u73B0","slug":"node-api-\u5B9E\u73B0"},{"level":3,"title":"\u8F85\u52A9\u5B8F\u4E0E\u521D\u59CB\u5316","slug":"\u8F85\u52A9\u5B8F\u4E0E\u521D\u59CB\u5316"},{"level":3,"title":"\u7ED1\u5B9A\u51FD\u6570","slug":"\u7ED1\u5B9A\u51FD\u6570"},{"level":3,"title":"\u6267\u884C","slug":"\u6267\u884C"},{"level":3,"title":"\u5B8C\u6210","slug":"\u5B8C\u6210"},{"level":3,"title":"\u8FD4\u56DE Promise","slug":"\u8FD4\u56DE-promise"},{"level":2,"title":"node-addon-api \u5B9E\u73B0","slug":"node-addon-api-\u5B9E\u73B0"},{"level":3,"title":"\u7ED1\u5B9A\u51FD\u6570","slug":"\u7ED1\u5B9A\u51FD\u6570-1"},{"level":3,"title":"\u7EE7\u627F AsyncWorker \u7C7B","slug":"\u7EE7\u627F-asyncworker-\u7C7B"},{"level":3,"title":"Return Promise","slug":"return-promise"}],"relativePath":"zh/guide/multithreaded-async.md","lastUpdated":1658753133000}',t={},o=p(`<h1 id="\u591A\u7EBF\u7A0B\u5F02\u6B65" tabindex="-1">\u591A\u7EBF\u7A0B\u5F02\u6B65 <a class="header-anchor" href="#\u591A\u7EBF\u7A0B\u5F02\u6B65" aria-hidden="true">#</a></h1><ul><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_create_async_work" target="_blank" rel="noopener noreferrer">napi_create_async_work</a></li><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_delete_async_work" target="_blank" rel="noopener noreferrer">napi_delete_async_work</a></li><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_queue_async_work" target="_blank" rel="noopener noreferrer">napi_queue_async_work</a></li><li><a href="https://nodejs.org/dist/v16.15.0/docs/api/n-api.html#napi_cancel_async_work" target="_blank" rel="noopener noreferrer">napi_cancel_async_work</a></li></ul><p>\u591A\u7EBF\u7A0B\u5F02\u6B65 API \u9700\u8981\u542F\u7528 pthreads\uFF1A</p><div class="language-bash"><pre><code>emcc -sUSE_PTHREADS<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">..</span>.
</code></pre></div><p>\u540C\u65F6\u8FD8\u5EFA\u8BAE\u6307\u5B9A\u7EBF\u7A0B\u6C60\u5927\u5C0F\uFF1A</p><div class="language-bash"><pre><code>emcc -sUSE_PTHREADS<span class="token operator">=</span><span class="token number">1</span> -sPTHREAD_POOL_SIZE<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">..</span>.
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>\u5982\u679C\u4F60\u542F\u7528\u4E86 pthreads (<code>-sUSE_PTHREADS=1</code>)\uFF0C \u8F93\u51FA\u7684 JavaScript \u5C31<strong>\u4E0D\u80FD</strong>\u5728 webpack \u4E4B\u7C7B\u7684\u6253\u5305\u5668\u4E2D\u4F7F\u7528\u3002</p></div><p>\u793A\u4F8B\uFF1A</p><p>\u5728\u5B50\u7EBF\u7A0B\u4E2D\u4F7F\u7528\u8499\u7279\u5361\u7F57\u65B9\u6CD5\u4F30\u8BA1 \u03C0 \u7684\u503C\u3002\u5728 [0,1][0,1] \u5E73\u9762\u4E0A\u83B7\u53D6\u968F\u673A x \u548C y \u503C\u7684 <code>points</code> \u4E2A\u70B9\u6837\u672C\u3002 \u8BA1\u7B97\u5BF9\u89D2\u7EBF\u7684\u957F\u5EA6\u53EF\u4EE5\u544A\u8BC9\u6211\u4EEC\u8BE5\u70B9\u662F\u4F4D\u4E8E\u4ECE 0,1 \u5230 1,0 \u7684\u56DB\u5206\u4E4B\u4E00\u5706\u7684\u5185\u90E8\u8FD8\u662F\u5916\u90E8\u3002\u5185\u90E8\u4E0E\u5916\u90E8\u7684\u70B9\u6570\u4E4B\u6BD4\u4E3A\u6211\u4EEC\u63D0\u4F9B\u4E86 \u03C0/4 \u7684\u8FD1\u4F3C\u503C\u3002</p><p>\u5BFC\u51FA\u51FD\u6570\u7684\u7B7E\u540D\uFF1A</p><div class="language-ts"><pre><code><span class="token comment">/** 
 * \u5982\u679C\u7EBF\u7A0B\u6C60\u4E2D\u6709\u7A7A\u95F2\u7EBF\u7A0B\uFF0C\u8BE5\u51FD\u6570\u4F1A\u521B\u5EFA\u4E00\u4E2A\u5B50\u7EBF\u7A0B\u3002
 * \u8BA1\u7B97\u7ED3\u679C\u540E\u4F1A\u5728\u4E3B\u7EBF\u7A0B\u4E2D\u8C03\u7528\u56DE\u8C03\u51FD\u6570\u3002
 */</span>
<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">estimate</span><span class="token punctuation">(</span>
  points<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  callback<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>err<span class="token operator">:</span> Error<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token punctuation">(</span>err<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> result<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
</code></pre></div><p>\u7528\u4F8B\uFF1A</p><div class="language-js"><pre><code>Module<span class="token punctuation">.</span><span class="token function-variable function">onRuntimeInitialized</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> calculations <span class="token operator">=</span> <span class="token number">100000000</span>
  <span class="token keyword">const</span> batches <span class="token operator">=</span> <span class="token number">16</span>
  <span class="token keyword">let</span> ended <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">function</span> <span class="token function">done</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    total <span class="token operator">+=</span> result<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>ended <span class="token operator">===</span> batches<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5DF2\u5B8C\u6210\u6240\u6709\u6279\u6B21\u7684\u6267\u884C</span>
      <span class="token keyword">const</span> pi <span class="token operator">=</span> total <span class="token operator">/</span> batches
      <span class="token keyword">const</span> ms <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\t\u03C0 \u2248 &#39;</span> <span class="token operator">+</span> pi <span class="token operator">+</span>
                  <span class="token string">&#39; (&#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>pi <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; away from actual)&#39;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\tTook &#39;</span> <span class="token operator">+</span> ms <span class="token operator">+</span> <span class="token string">&#39;ms&#39;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> batches<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Module<span class="token punctuation">.</span>emnapiExports<span class="token punctuation">.</span><span class="token function">estimate</span><span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>C \u5B9E\u73B0\uFF1A</p><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">double</span> <span class="token function">monte_carlo_estimate_pi</span><span class="token punctuation">(</span><span class="token keyword">int</span> points<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__cplusplus</span></span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">static</span> <span class="token class-name">pthread_mutex_t</span> mutex <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> randseed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> <span class="token function">monte_carlo_estimate_pi</span><span class="token punctuation">(</span><span class="token keyword">int</span> points<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> points<span class="token punctuation">;</span>
  <span class="token keyword">int</span> inside <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> seed<span class="token punctuation">;</span>

  <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>randseed <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    randseed <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  seed <span class="token operator">=</span> <span class="token function">rand_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>randseed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">double</span> rand_max <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> RAND_MAX<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token function">rand_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>seed<span class="token punctuation">)</span> <span class="token operator">/</span> rand_max<span class="token punctuation">;</span>
    <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token function">rand_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>seed<span class="token punctuation">)</span> <span class="token operator">/</span> rand_max<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">++</span>inside<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>inside <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> points<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="node-api-\u5B9E\u73B0" tabindex="-1">Node-API \u5B9E\u73B0 <a class="header-anchor" href="#node-api-\u5B9E\u73B0" aria-hidden="true">#</a></h2><h3 id="\u8F85\u52A9\u5B8F\u4E0E\u521D\u59CB\u5316" tabindex="-1">\u8F85\u52A9\u5B8F\u4E0E\u521D\u59CB\u5316 <a class="header-anchor" href="#\u8F85\u52A9\u5B8F\u4E0E\u521D\u59CB\u5316" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;node_api.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NAPI_CALL_BASE</span><span class="token expression"><span class="token punctuation">(</span>env<span class="token punctuation">,</span> the_call<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token comment">/* ... */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NAPI_CALL</span><span class="token expression"><span class="token punctuation">(</span>env<span class="token punctuation">,</span> the_call<span class="token punctuation">)</span>           </span><span class="token comment">/* ... */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NAPI_CALL_VOID</span><span class="token expression"><span class="token punctuation">(</span>env<span class="token punctuation">,</span> the_call<span class="token punctuation">)</span>      </span><span class="token comment">/* ... */</span></span>

<span class="token function">NAPI_MODULE_INIT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  napi_value estimate_fn<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_create_function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;estimate&quot;</span><span class="token punctuation">,</span> NAPI_AUTO_LENGTH<span class="token punctuation">,</span>
                                      js_estimate<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>estimate_fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_set_named_property</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> exports<span class="token punctuation">,</span>
                                         <span class="token string">&quot;estimate&quot;</span><span class="token punctuation">,</span> estimate_fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u7ED1\u5B9A\u51FD\u6570" tabindex="-1">\u7ED1\u5B9A\u51FD\u6570 <a class="header-anchor" href="#\u7ED1\u5B9A\u51FD\u6570" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> points<span class="token punctuation">;</span>
  <span class="token keyword">double</span> result<span class="token punctuation">;</span>
  napi_ref callback<span class="token punctuation">;</span>
  napi_async_work work<span class="token punctuation">;</span>
<span class="token punctuation">}</span> estimate_request<span class="token punctuation">;</span>

<span class="token keyword">static</span> napi_value <span class="token function">js_estimate</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">size_t</span> argc <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  napi_value args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_cb_info</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  napi_valuetype valuetype0<span class="token punctuation">,</span> valuetype1<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_typeof</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>valuetype1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>valuetype0 <span class="token operator">!=</span> napi_number <span class="token operator">||</span> valuetype1 <span class="token operator">!=</span> napi_function<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  estimate_request<span class="token operator">*</span> request <span class="token operator">=</span>
    <span class="token punctuation">(</span>estimate_request<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>estimate_request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">napi_throw_type_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;malloc failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  napi_status status<span class="token punctuation">;</span>

  status <span class="token operator">=</span> <span class="token function">napi_get_value_int32</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>request<span class="token operator">-&gt;</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  status <span class="token operator">=</span> <span class="token function">napi_create_reference</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>request<span class="token operator">-&gt;</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  status <span class="token operator">=</span> <span class="token function">napi_create_async_work</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                                  estimate_on_execute<span class="token punctuation">,</span>
                                  estimate_on_complete<span class="token punctuation">,</span>
                                  request<span class="token punctuation">,</span>
                                  <span class="token operator">&amp;</span>request<span class="token operator">-&gt;</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  status <span class="token operator">=</span> <span class="token function">napi_queue_async_work</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> request<span class="token operator">-&gt;</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">free</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u6267\u884C" tabindex="-1">\u6267\u884C <a class="header-anchor" href="#\u6267\u884C" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token comment">// \u5728\u5B50\u7EBF\u7A0B\u4E2D\u8C03\u7528</span>
<span class="token comment">// \u4E0D\u53EF\u4F7F\u7528\u4E0E JavaScript \u4EA4\u4E92\u7684 API</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">estimate_on_execute</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  estimate_request<span class="token operator">*</span> request <span class="token operator">=</span> <span class="token punctuation">(</span>estimate_request<span class="token operator">*</span><span class="token punctuation">)</span> data<span class="token punctuation">;</span>
  request<span class="token operator">-&gt;</span>result <span class="token operator">=</span> <span class="token function">monte_carlo_estimate_pi</span><span class="token punctuation">(</span>request<span class="token operator">-&gt;</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u5B8C\u6210" tabindex="-1">\u5B8C\u6210 <a class="header-anchor" href="#\u5B8C\u6210" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token comment">// \u5728\u4E3B\u7EBF\u7A0B\u4E2D\u8C03\u7528</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">estimate_on_complete</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_status status<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  estimate_request<span class="token operator">*</span> req <span class="token operator">=</span> <span class="token punctuation">(</span>estimate_request<span class="token operator">*</span><span class="token punctuation">)</span> data<span class="token punctuation">;</span>
  estimate_request request <span class="token operator">=</span> <span class="token operator">*</span>req<span class="token punctuation">;</span>
  <span class="token function">free</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
  napi_value undefined<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> callback_ret<span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_undefined</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token operator">&amp;</span>undefined<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_reference_value</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span>
                                               request<span class="token punctuation">.</span>callback<span class="token punctuation">,</span>
                                               <span class="token operator">&amp;</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    napi_value err<span class="token punctuation">,</span> errmsg<span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_create_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Execute failed.&quot;</span><span class="token punctuation">,</span>
                                                NAPI_AUTO_LENGTH<span class="token punctuation">,</span>
                                                <span class="token operator">&amp;</span>errmsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_create_error</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> errmsg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_call_function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> callback<span class="token punctuation">,</span>
                                           <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">,</span> <span class="token operator">&amp;</span>callback_ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    napi_value callback_argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_get_null</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> callback_argv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_create_double</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span>
                                          request<span class="token punctuation">.</span>result<span class="token punctuation">,</span> callback_argv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_call_function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> callback<span class="token punctuation">,</span>
                                          <span class="token number">2</span><span class="token punctuation">,</span> callback_argv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>callback_ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_delete_reference</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> request<span class="token punctuation">.</span>callback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_delete_async_work</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> request<span class="token punctuation">.</span>work<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u8FD4\u56DE-promise" tabindex="-1">\u8FD4\u56DE Promise <a class="header-anchor" href="#\u8FD4\u56DE-promise" aria-hidden="true">#</a></h3><p>\u51FD\u6570\u7B7E\u540D\uFF1A</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">estimate</span><span class="token punctuation">(</span>points<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>
</code></pre></div><p>\u8BF7\u6C42\u7684\u7ED3\u6784\u4F53\uFF1A</p><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> points<span class="token punctuation">;</span>
  <span class="token keyword">double</span> result<span class="token punctuation">;</span>
  napi_deferred deferred<span class="token punctuation">;</span>
  napi_async_work work<span class="token punctuation">;</span>
<span class="token punctuation">}</span> estimate_request<span class="token punctuation">;</span>
</code></pre></div><p>\u8FD4\u56DE Promise\uFF1A</p><div class="language-c"><pre><code><span class="token keyword">static</span> napi_value <span class="token function">js_estimate</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  napi_value promise<span class="token punctuation">;</span>
  <span class="token function">napi_create_promise</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token operator">&amp;</span>request<span class="token operator">-&gt;</span>deferred<span class="token punctuation">,</span> <span class="token operator">&amp;</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ...</span>

  <span class="token keyword">return</span> promise<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5B8C\u6210\u540E resolve \u6216 reject\uFF1A</p><div class="language-c"><pre><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">estimate_on_complete</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_status status<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_reject_deferred</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> request<span class="token punctuation">.</span>deferred<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token function">NAPI_CALL_VOID</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token function">napi_resolve_deferred</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> request<span class="token punctuation">.</span>deferred<span class="token punctuation">,</span> callback_argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="node-addon-api-\u5B9E\u73B0" tabindex="-1">node-addon-api \u5B9E\u73B0 <a class="header-anchor" href="#node-addon-api-\u5B9E\u73B0" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>\u5982\u679C\u8FD0\u884C\u65F6\u4E0D\u652F\u6301 <code>FinalizationRegistry</code> \u548C <code>WeakRef</code>\u5219<strong>\u4E0D\u80FD</strong>\u4F7F\u7528 node-addon-api\u3002</p></div><ul><li><a href="https://github.com/nodejs/node-addon-api/blob/v5.0.0/doc/async_worker.md" target="_blank" rel="noopener noreferrer">node-addon-api AsyncWorker \u7C7B</a></li></ul><h3 id="\u7ED1\u5B9A\u51FD\u6570-1" tabindex="-1">\u7ED1\u5B9A\u51FD\u6570 <a class="header-anchor" href="#\u7ED1\u5B9A\u51FD\u6570-1" aria-hidden="true">#</a></h3><div class="language-cpp"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;napi.h&gt;</span></span>

<span class="token keyword">static</span> Napi<span class="token double-colon punctuation">::</span>Value <span class="token function">JsEstimate</span><span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>CallbackInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">int</span> points <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Number<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Uint32Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Napi<span class="token double-colon punctuation">::</span>Function callback <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Function<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span><span class="token operator">*</span> piWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MonteCarloEstimatePiWorker</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  piWorker<span class="token operator">-&gt;</span><span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> info<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Undefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Napi<span class="token double-colon punctuation">::</span>Object <span class="token function">Init</span><span class="token punctuation">(</span>Napi<span class="token double-colon punctuation">::</span>Env env<span class="token punctuation">,</span> Napi<span class="token double-colon punctuation">::</span>Object exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  exports<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>Napi<span class="token double-colon punctuation">::</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;estimate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              Napi<span class="token double-colon punctuation">::</span><span class="token class-name">Function</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> JsEstimate<span class="token punctuation">,</span> <span class="token string">&quot;estimate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">NODE_API_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Init<span class="token punctuation">)</span>
</code></pre></div><h3 id="\u7EE7\u627F-asyncworker-\u7C7B" tabindex="-1">\u7EE7\u627F AsyncWorker \u7C7B <a class="header-anchor" href="#\u7EE7\u627F-asyncworker-\u7C7B" aria-hidden="true">#</a></h3><div class="language-cpp"><pre><code><span class="token keyword">class</span> <span class="token class-name">MonteCarloEstimatePiWorker</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">AsyncWorker</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">MonteCarloEstimatePiWorker</span><span class="token punctuation">(</span><span class="token keyword">int</span> points<span class="token punctuation">,</span> <span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>Function<span class="token operator">&amp;</span> callback<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">AsyncWorker</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">points_</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">result_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5728\u5B50\u7EBF\u7A0B</span>
    result_ <span class="token operator">=</span> <span class="token function">monte_carlo_estimate_pi</span><span class="token punctuation">(</span>points_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">OnOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5728\u4E3B\u7EBF\u7A0B</span>
    <span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Undefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Null</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      Napi<span class="token double-colon punctuation">::</span><span class="token class-name">Number</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result_<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">OnError</span><span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>Error<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5728\u4E3B\u7EBF\u7A0B</span>
    <span class="token function">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Undefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> points_<span class="token punctuation">;</span>
  <span class="token keyword">double</span> result_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="return-promise" tabindex="-1">Return Promise <a class="header-anchor" href="#return-promise" aria-hidden="true">#</a></h3><p>\u51FD\u6570\u7B7E\u540D\uFF1A</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">estimate</span><span class="token punctuation">(</span>points<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>
</code></pre></div><div class="language-cpp"><pre><code><span class="token keyword">class</span> <span class="token class-name">MonteCarloEstimatePiWorker</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">AsyncWorker</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">MonteCarloEstimatePiWorker</span><span class="token punctuation">(</span><span class="token keyword">int</span> points<span class="token punctuation">,</span> <span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>Promise<span class="token double-colon punctuation">::</span>Deferred<span class="token operator">&amp;</span> deferred<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">AsyncWorker</span><span class="token punctuation">(</span>deferred<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">points_</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">result_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">deferred_</span><span class="token punctuation">(</span>deferred<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result_ <span class="token operator">=</span> <span class="token function">monte_carlo_estimate_pi</span><span class="token punctuation">(</span>points_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">OnOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    deferred_<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>Napi<span class="token double-colon punctuation">::</span><span class="token class-name">Number</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">OnError</span><span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>Error<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    deferred_<span class="token punctuation">.</span><span class="token function">Reject</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">int</span> points_<span class="token punctuation">;</span>
  <span class="token keyword">double</span> result_<span class="token punctuation">;</span>
  Napi<span class="token double-colon punctuation">::</span>Promise<span class="token double-colon punctuation">::</span>Deferred deferred_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> Napi<span class="token double-colon punctuation">::</span>Value <span class="token function">JsEstimate</span><span class="token punctuation">(</span><span class="token keyword">const</span> Napi<span class="token double-colon punctuation">::</span>CallbackInfo<span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Napi<span class="token double-colon punctuation">::</span>Env env <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong number of arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">IsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Napi<span class="token double-colon punctuation">::</span>TypeError e <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span><span class="token class-name">TypeError</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">&quot;Wrong arguments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">NAPI_THROW</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Napi</span><span class="token double-colon punctuation">::</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">int</span> points <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">As</span><span class="token generic class-name"><span class="token operator">&lt;</span>Napi<span class="token double-colon punctuation">::</span>Number<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Uint32Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Napi<span class="token double-colon punctuation">::</span>Promise<span class="token double-colon punctuation">::</span>Deferred deferred <span class="token operator">=</span> Napi<span class="token double-colon punctuation">::</span>Promise<span class="token double-colon punctuation">::</span><span class="token class-name">Deferred</span><span class="token double-colon punctuation">::</span><span class="token function">New</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span><span class="token operator">*</span> piWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MonteCarloEstimatePiWorker</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> deferred<span class="token punctuation">)</span><span class="token punctuation">;</span>
  piWorker<span class="token operator">-&gt;</span><span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> deferred<span class="token punctuation">.</span><span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,44),e=[o];function c(u,l,k,i,r,d){return s(),a("div",null,e)}var m=n(t,[["render",c]]);export{_ as __pageData,m as default};
